'''
Written by Nastasha Wijers, file started 2017-01-19 01:09
made to load the .npz files generated by make_maps to make plots and histograms;
meant as a replacement for the copy-paste mess in make_emission_maps.py
(generating lines for the files fo seem useful to save, for later error checking)
for use with python2.7
''' 
import numpy as np
import h5py
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import mpl_toolkits.axes_grid1 as axgrid
import matplotlib.gridspec as gsp
import fnmatch
import os

import make_maps_opts_locs as ol
import eagle_constants_and_units as c
import cosmo_utils as csu

pdir = ol.pdir
ndir = ol.ndir
mdir = '/net/luttero/data2/imgs/cddfs_nice/'

# update with new options
ionopts = ['o6','o7','o8','halpha','lya']
simopts = ['L0012N0188','L0025N0376','L0025N0752RECAL']
boxopts = ['full','h1','h2','q1','q2','q3','q4']
sfropts = ['fromSFR','noSFR']

# boz sizes, and fractional centre and slice thicknesses
boxsizes = {'L0012N0188': 12.5, 'L0025N0376': 25.,'L0025N752': 25., 'L0025N0752RECAL': 25.}
zslccens = {'full': (0.5,1.), 'h1': (0.25,0.5), 'h2': (0.75,0.5),\
 'q1': (0.125,0.25), 'q2': (0.375,0.25), 'q3': (0.625,0.25), 'q4': (0.875,0.25)}

# abrreviation conventions
simabrs = {'L0012N0188': '12','L0025N0376':'25','L0025N0752RECAL':'25h'}

# -------------------------------------------------------------
# only works for version 2 names
# -------------------------------------------------------------
def filename(sfrtag,ion,simnum,numpix,box,vers=2,snapnum=27,kernel='C2',dat = 'emission'): # no checks on numpix and vers
    
    versionnumber = vers
    SFRind = sfrtag 
    npzdir = '/net/luttero/data1/line_em_abs/'
    
    if ion not in ionopts:
        print('Ion %s is not an implemented option.\n' %ion)          
    if simnum not in simopts:
        print('Simulation %s is not an implemented option.\n' %simnum) 
    if box not in boxopts:
        print('Box %s is not an implemented option.\n' %box)
    if sfrtag not in sfropts:
        print('SFR tag %s is not an implemented option.\n' %box) 
    
    BoxSize = boxsizes[simnum]
    #L_x = BoxSize
    #L_y = BoxSize
    L_z = (zslccens[box])[1]*BoxSize
    centre = [0.5*BoxSize,0.5*BoxSize,(zslccens[box])[0]*BoxSize]    
 
    zcen = ''
    if L_z < BoxSize :
        zcen = 'zcen%s_' % str(centre[2])
    xypos = ''
    #if L_x < BoxSize or L_y < BoxSize:
    #    xypos = 'x%f_pm%f_y%f_pm%f' %(centre[0],L_x,centre[1],L_y)
       
    resfile = npzdir + '%s_%s_%s_%s_test%s_SmAb_%sSm_%spix_%fslice_' %(dat,ion,simnum,snapnum,str(versionnumber),kernel,str(numpix),L_z) + zcen + xypos + SFRind

    return resfile + '.npz'



def abbrname(sfrtag,ion,simnum,numpix,box):
    if box =='full':
        obox = ''
    else: 
        obox = '_' + box
    if sfrtag == 'noSFR':
        osfrtag = ''
    elif sfrtag =='fromSFR':
        osfrtag = '_sfr' 
    else: # sfrtag == 'wSFR'
        osfrtag = '_wsfr'    
    return '%s_%s_%s%s%s' % (ion,simabrs[simnum],str(numpix)[0],obox,osfrtag)

def Lz(abr):
    if '_12_' in abr:
        return 12.5
    if '_25_' in abr or '_25h_' in abr:
        return 25.
    if '_50_' in abr:
        return 50.
    if '_100_' in abr:
        return 100.
# --------------------------------------------------------------------        



def makePDF(img,bins=50,**kwargs): # img: array to be histogrammed
    hist, bin_edges = np.histogram(np.ndarray.flatten(img[np.isfinite(img)]), bins, **kwargs)
    binsize = bin_edges[1]-bin_edges[0]      
    return bin_edges[:-1], hist/(binsize*np.prod(img.shape)) # hist, binedges order and selection to use *(..) in plt.step (last bin edge is easily recovered since bins are equally spaced)


def make_coldens_hist(coldens, L_z, redshift, bins = 50, colmin = None,colmax = None):
    # returns d n_sightnlines / dN dX (not /d log N)
    
    numpix = np.prod(coldens.shape)
    pcoldens = np.ndarray.flatten(coldens[np.isfinite(coldens)]) # we don't need the shape information anymore, and zero entries won't contribute anyway
             
    if colmin == None:
        colmin = np.min(pcoldens)

    if colmax == None:
        colmax = np.max(pcoldens)
    
    # assuming L_z is smaller than the distance over which H varies significantly; 
    # assumed in single-snapshot projection anyway  
    dz = csu.Hubble(redshift)/c.c * L_z * c.cm_per_mpc
    dX = dz * (1+redshift)**2*c.hubble*c.hubbleparam/csu.Hubble(redshift) 
    
    # !! figure out the units !! there must be some /deg**2 correction or something I'm missing
    # histogram; input values are already log column densities 
    hist, bin_edges = np.histogram(pcoldens,bins = bins, \
        range = (colmin,colmax))     
    logcoldens_midbins = 0.5*(bin_edges[1:]+bin_edges[:-1])
    hist = hist/(np.log(10.)*10**(logcoldens_midbins)*(bin_edges[1:]-bin_edges[:-1]))/(numpix*dX) 
    
    return hist, bin_edges[:-1]
    
    


 
# from http://stackoverflow.com/questions/6710834/iterating-over-list-or-single-element-in-python  	
# answered Jul 15 '11 at 17:26
# kindall
def iterfy(iterable):
    if isinstance(iterable, basestring):
        iterable = [iterable]
    try:
        iter(iterable)
    except TypeError:
        iterable = [iterable]
    return iterable

#### the files to run this thing

# last 3 (key word) options: only one option, since not included in abbr -> will overwrite each other
# returns a dictionary of abbr : loaded file

def for_loadfiles(sfrtags,ions,simnums,numpixs,boxes,**kwargs):  
    arglist = [(sfrtag,ion,simnum,numpix,box) \
     for ion in ions for simnum in simnums for numpix in numpixs\
     for box in boxes for sfrtag in sfrtags]
    return {abbrname(*arg): np.load(filename(*arg,**kwargs))['arr_0'] for arg in arglist}




def loadfiles(ions,simnums,numpixs,boxes,sfrtags,**kwargs): # sfr tag is 'wsfr' -> noSFR, SFR generated too (no need to put in list)
    ions = iterfy(ions)
    simnums = iterfy(simnums)
    numpixs = iterfy(numpixs)     
    boxes = iterfy(boxes)
    
    if 'wSFR' not in sfrtags:
        sfrtags = iterfy(sfrtags)
        return for_loadfiles(sfrtags,ions,simnums,numpixs,boxes,**kwargs)
        
    if 'wSFR' in sfrtags: # can be a single argument or list element
        arglist = [(ion,simnum,numpix,box) for ion in ions \
         for simnum in simnums for numpix in numpixs for box in boxes]
        tempdict = for_loadfiles(['noSFR','fromSFR'],ions,simnums,numpixs,boxes,**kwargs)
        tempdict.update({abbrname('wSFR',*arg): np.log10(10**tempdict[abbrname('noSFR',*arg)]+10.**tempdict[abbrname('fromSFR',*arg)]) for arg in arglist})
        return tempdict        




# returns a dict of abbr : (binedges[:-1], hist) 
# if fdict is specified, it doesn't matter what you put in for ions, simnums, numpixs, boxes, sfrtags (e.g. 1,1,1,1,1, will give no errors)
def makehists(ions,simnums,numpixs,boxes,sfrtags,fdict=None,loadfile_argdict={},hist_argdict = {}): 
    if fdict == None:
        fdict = loadfiles(ions,simnums,numpixs,boxes,sfrtags,**loadfile_argdict)
    return {key: makePDF(fdict[key],**hist_argdict) for key in fdict.keys()} 


def make_coldens_hists(ions,simnums,numpixs,boxes,sfrtags,redshift,fdict=None,loadfile_argdict={},hist_argdict = {}):
    if fdict == None:
        fdict = loadfiles(ions,simnums,numpixs,boxes,sfrtags,dat='coldens',**loadfile_argdict)
    return {key: make_coldens_hist(fdict[key],Lz(key),redshift,**hist_argdict) for key in fdict.keys()} 
    



def readdata(filen,separator = None,headerlength=1):
    # input: file name, charachter separating columns, number of lines at the top to ignore
    # separator None means any length of whitespace is considered a separator
    # only for numerical data
    
    data = open(filen,'r')
    array = []
    # skip header:
    for i in range(headerlength):
        data.readline()
    for line in data:
        line = line.strip() # remove '\n'
        columns = line.split(separator)
        columns = [np.float(col) for col in columns]
        array.append(columns)
    data.close()
    return np.array(array)

def save_cddfs_to_hdf5(path, hdf5name):
    pattern = 'cddf_***.npz'
    files = fnmatch.filter(next(os.walk(path))[2], pattern)
    with h5py.File(path + hdf5name + '.hdf5', 'a') as df:
        hed = df.create_group('Header')
        hed.attrs.create('units_N', 'log10 cm^-2')
        hed.attrs.create('info', 'bins are equally spaced')
        for filen in files:
            fulln = path + filen
            data = np.load(fulln)
            grp = df.create_group(filen)
            grp.create_dataset('dn_absorbers_dNdX', data=data['bins'])
            try:
                grp.create_dataset('left_edges', data=data['logedges'])
            except KeyError:
                print filen
                grp.create_dataset('left_edges', data=data['edges'])
def imreduce(img, factor, log=True, method = 'average', wimg=None, wlog='auto'):
    """
    img: 2D image array
    factor: factor by which to reduce the number of array elements along each axis
    log: whether or not the array contains log data values
    """
    if method not in ['average','waverage','sum']:
        print "Method must be one of 'average','waverage','sum'"
        return None
    if log:
        inimg = 10**img
    else:
        inimg = img
    inshape = np.array(img.shape)
    
    if np.sum(inshape%factor) != 0:
        print('Output grid must have a integer number of cells: cannot reduce image pixels by a factor %i'%factor)
        return None
        
    if method == 'average' or method == 'sum':
        inimg = np.array(np.split(inimg,inshape[0]/factor,axis=0))
        inimg = np.array(np.split(inimg,inshape[1]/factor,axis=-1))
        inimg = np.sum(inimg,axis=-1)
        inimg = np.sum(inimg,axis=-1)
        if method == 'average':
            inimg = inimg/np.float(factor**2)        
        #outimg = np.average(inimg[])

    if method == 'waverage':
        if wimg.shape != img.shape:
            print 'Weight array must have the same shape as image array. Was', wimg.shape, img.shape
            return None
        if wimg == None:
            print('A weighting array wimg must be provided for the weighted average method.\n')
            return None
        if wlog == 'auto':
            wlog = log
        if wlog:
            inwimg = 10**wimg
        else:
            inwimg = wimg
        
        inimg *= inwimg
        inimg = np.array(np.split(inimg,inshape[0]/factor,axis=0))
        inimg = np.array(np.split(inimg,inshape[1]/factor,axis=-1))
        inimg = np.sum(inimg,axis=-1)
        inimg = np.sum(inimg,axis=-1)
        inwimg = np.array(np.split(inwimg,inshape[0]/factor,axis=0))
        inwimg = np.array(np.split(inwimg,inshape[1]/factor,axis=-1))
        inwimg = np.sum(inwimg,axis=-1)
        inwimg = np.sum(inwimg,axis=-1)
        inimg /= inwimg
        
    if log:
        inimg = np.log10(inimg)
    
    return inimg.T



def plothighcoldensregions(o7im,o8im,o7hi,o8hi,cat):
    fig, ax = plt.subplots(1,2)
    fontsize=12.

    img = ax[0].imshow(o7im.T,origin='lower',interpolation='nearest',extent=[0,100.,0.,100.],vmin=14.)
    div = axgrid.make_axes_locatable(ax[0])
    cax = div.append_axes("right",size="5%",pad=0.1)
    cbar = plt.colorbar(img, cax=cax)
    cbar.ax.set_ylabel(r'$\log_{10} N [\mathrm{cm}^{-2}]$', fontsize=fontsize)
    
    ax[0].set_title('O VII column density',fontsize=fontsize)
    ax[0].set_xlabel('cMpc',fontsize=fontsize)
    ax[0].set_ylabel('cMpc',fontsize=fontsize)
    
    for i in range(len(cat['xcop_cmpc'])):
        ax[0].add_patch(plt.Circle((cat['xcop_cmpc'][i],cat['ycop_cmpc'][i]),cat['r200c_pkpc'][i]*1.1e-3,edgecolor='red',fill=False))

    ax[0].scatter((o7hi[0]+0.5)/32000.*100.,(o7hi[1]+0.5)/32000.*100.,color='magenta',label=r'$>17.$',s=5.)
    
    ax[0].set_xlim(0,100.)
    ax[0].set_ylim(0,100.)
    ax[0].legend()
    ax[0].grid()


    img = ax[1].imshow(o8im.T,origin='lower',interpolation='nearest',extent=[0,100.,0.,100.],vmin=13.5)
    div = axgrid.make_axes_locatable(ax[1])
    cax = div.append_axes("right",size="5%",pad=0.1)
    cbar = plt.colorbar(img, cax=cax)
    cbar.ax.set_ylabel(r'$\log_{10} N [\mathrm{cm}^{-2}]$', fontsize=fontsize)
    
    ax[1].set_title('O VIII column density',fontsize=fontsize)
    ax[1].set_xlabel('cMpc',fontsize=fontsize)
    ax[1].set_ylabel('cMpc',fontsize=fontsize)
    ax[1].grid()
    
    for i in range(len(cat['xcop_cmpc'])):
        ax[1].add_patch(plt.Circle((cat['xcop_cmpc'][i],cat['ycop_cmpc'][i]),cat['r200c_pkpc'][i]*1.1e-3,edgecolor='red',fill=False))

    ax[1].scatter((o8hi[0]+0.5)/32000.*100.,(o8hi[1]+0.5)/32000.*100.,color='magenta',label=r'$>16.75$',s=5.)
    
    ax[1].set_xlim(0,100.)
    ax[1].set_ylim(0,100.)
    ax[1].legend()

    plt.show()

# r'$ \log_{10}\, N_{\mathrm{O\, VI}}\; [\mathrm{cm}^{-2}]$'
# r'$\log_{10} \, S_B \: [\mathrm{photons} \, \mathrm{cm}^{-2} \mathrm{s}^{-1} \mathrm{sr}^{-1} ]$'
# O6: $1032\,\mathrm{\AA}$    O7: $21.60\,\mathrm{\AA}$   O8: $18.97\,\mathrm{\AA}$ Fe17: $17.05\,\mathrm{\AA}$
def imsplot(base,fill_ins,size,imnamebase =None,clabel='',title='',colmap = 'afmhot', factor = 10, Vmin = None, Vmax= None,xystarts=None,sl = [slice(None,None,None), slice(None,None,None)]):

    if imnamebase == None:
        if base[-4:] == '.npz':
            imnamebase = base[:-4] + '.png'
        elif base[-6:] == '.npz%s':
            imnamebase = base[:-6] + '%s.png'
        else:
            imnamebase = base
    if xystarts ==None:
        xystarts = [0.,0.]

    for i in range(len(fill_ins)):
        file = base%(fill_ins[i]) 
        data = (np.load(file)['arr_0'])[sl]
        if factor !=1:
            data = imreduce(data, factor, log=True, method = 'average')
        
        fontsize=13
        
        fig = plt.figure(figsize = (5.5, 5.)) # large size just as a trick to get higher resolution
        ax = plt.subplot(111)   
        ax.set_xlabel(r'X [cMpc]',fontsize=fontsize)
        ax.set_ylabel(r'Y [cMpc]',fontsize=fontsize)
        ax.minorticks_on()
        ax.tick_params(labelsize=fontsize)
        ax.patch.set_facecolor(cm.get_cmap(colmap)(0.)) # sets background color to lowest color map value 
        img = ax.imshow(data.T,extent=(xystarts[0],xystarts[0]+size,xystarts[1],xystarts[1]+size),origin='lower', cmap=cm.get_cmap(colmap), vmin = Vmin, vmax=Vmax,interpolation='nearest')
        plt.title(title,fontsize=fontsize)
        div = axgrid.make_axes_locatable(ax)
        cax = div.append_axes("right",size="5%",pad=0.1)
        cbar = plt.colorbar(img, cax=cax)
        cbar.solids.set_edgecolor("face")
        cbar.ax.set_ylabel(r'%s' % (clabel), fontsize=fontsize)
        cbar.ax.tick_params(labelsize=fontsize)
        # save PDF figure
        fig.tight_layout()
        #fig.subplots_adjust(right=0.88)
        plt.savefig(imnamebase%(fill_ins[i]),format = 'png')
        plt.close()
        print(fill_ins[i] + ' done.')
    return 0


def implot(img,size,imname,clabel='',title='',colmap = 'afmhot', factor = 10, Vmin = None, Vmax= None,xystarts=None,sl = [slice(None,None,None), slice(None,None,None)]):

    if xystarts ==None:
        xystarts = [0.,0.]

 
    if factor !=1:
        data = imreduce(img[sl], factor, log=True, method = 'average')
    else:
        data = img[sl] 
    fontsize=13
        
    fig = plt.figure(figsize = (5.5, 5.)) # large size just as a trick to get higher resolution
    ax = plt.subplot(111)   
    ax.set_xlabel(r'X [cMpc]',fontsize=fontsize)
    ax.set_ylabel(r'Y [cMpc]',fontsize=fontsize)
    ax.minorticks_on()
    ax.tick_params(labelsize=fontsize)
    ax.patch.set_facecolor(cm.get_cmap(colmap)(0.)) # sets background color to lowest color map value 
    img = ax.imshow(data.T,extent=(xystarts[0],xystarts[0]+size,xystarts[1],xystarts[1]+size),origin='lower', cmap=cm.get_cmap(colmap), vmin = Vmin, vmax=Vmax,interpolation='nearest')
    plt.title(title,fontsize=fontsize)
    div = axgrid.make_axes_locatable(ax)
    cax = div.append_axes("right",size="5%",pad=0.1)
    cbar = plt.colorbar(img, cax=cax)
    cbar.solids.set_edgecolor("face")
    cbar.ax.set_ylabel(r'%s' % (clabel), fontsize=fontsize)
    cbar.ax.tick_params(labelsize=fontsize)
    # save PDF figure
    fig.tight_layout()
    #fig.subplots_adjust(right=0.88)
    plt.savefig(imname,format = 'png')
    plt.close()
    return 0


def stampplot(img,imname,colmap = 'afmhot', factor = 10, Vmin = None, Vmax= None, sl = [slice(None,None,None), slice(None,None,None)]):
 
    if factor !=1:
        data = imreduce(img[sl], factor, log=True, method = 'average')
    else:
        data = img[sl] 
    fontsize=13
        
    fig = plt.figure(figsize = (5., 5.)) # large size just as a trick to get higher resolution
    ax = plt.subplot(111)   
    ax.minorticks_off()
    ax.xaxis.set_major_locator(plt.NullLocator()) # turns off x axis ticks
    ax.yaxis.set_major_locator(plt.NullLocator())
    ax.patch.set_facecolor(cm.get_cmap(colmap)(0.)) # sets background color to lowest color map value 
    img = ax.imshow(data.T,origin='lower', cmap=cm.get_cmap(colmap), vmin = Vmin, vmax=Vmax,interpolation='nearest')
    # save PDF figure
    fig.tight_layout()
    #fig.subplots_adjust(right=0.88)
    plt.savefig(imname,format = 'png',bbox_inches='tight')
    plt.close()
    return 0

def mapcompare_fromhalosel(dct, colmap1='viridis', colmap2='cubehelix',\
               sidelength_tot=100., aexp=1., clabel1=None, clabel2=None, 
               savedir=None, halos=None, Mmin=None, Mmax=None, zmin=None, zmax=None, galid=None,\
               numR200=5.,\
               vmin1=None, vmin2=None, vmax1=None, vmax2=None, maplabel=None):
     '''
     Assumes z projection
     for random halos selection:
         Mmin, Mmax: halo mass M200c [Msun]
         zmin, zmax: [cMpc]
     galid: overrides any random selection parameters
     '''
     
     if galid is None:
         if Mmin is not None or Mmax is not None:
             if Mmin is None:
                 Mmin = 0.
             if Mmax is None:
                 Mmax = np.inf
             sel = np.logical_and(np.array(halos['M200c_Msun']) >= Mmin, np.array(halos['M200c_Msun']) < Mmax)
         else:
             sel = True
         if zmin is not None or zmax is not None:
             if zmin is None:
                 zmin = 0.
             if zmax is None:
                 zmax = np.inf
             sel2 = np.logical_and(np.array(halos['Zcop_cMpc']) >= zmin, np.array(halos['Zcop_cMpc']) < zmax)
         else:
             sel2 = True
         sel = np.where(np.logical_and(sel, sel2))[0]
         del sel2
         ind = np.random.choice(sel)
         del sel
     else:
         ind = np.where(halos['galaxyid'] == galid)[0][0]
     
     shape = dct['img1'].shape
     Mass = halos['M200c_Msun'][ind]
     R200 = halos['R200c_pkpc'][ind]
     Xcop = halos['Xcop_cMpc'][ind]
     Ycop = halos['Ycop_cMpc'][ind]
     Zcop = halos['Zcop_cMpc'][ind]
     galid = halos['galaxyid'][ind]
     print('doing galaxy %i at X, Y, Z [cMpc] = (%.3f, %.3f, %.3f)'%(galid, Xcop, Ycop, Zcop))
     
     slc = (slice(int(np.floor( (Xcop - numR200 * R200 / aexp / 1.e3) / sidelength_tot * float(shape[0]) )),\
                   int(np.ceil( (Xcop + numR200 * R200 / aexp / 1.e3) / sidelength_tot * float(shape[0]) )) ),\
            slice(int(np.floor( (Ycop - numR200 * R200 / aexp / 1.e3) / sidelength_tot * float(shape[1]) )),\
                   int(np.ceil( (Ycop + numR200 * R200 / aexp / 1.e3) / sidelength_tot * float(shape[1]) )) ),\
            )
     print slc
     if slc[0].start < 0 or slc[1].start < 0 or slc[0].stop >= shape[0] or slc[1].stop >= shape[1]:
         raise RuntimeError('Randomly selected halo region overlaps map edge; galaxy id was %i'%galid)
     
     info = r'galaxy ID %i, $\log_{10} \, \mathrm{M}_{200c} \, / \, \mathrm{M}_{\odot} = %.2f $'%(galid, np.log10(Mass))    
     
     savename = savedir + maplabel + '_slicex-%i-%i_slicey-%i-%i_galaxy%i.pdf'%(slc[0].start, slc[0].stop, slc[1].start, slc[1].stop, galid)
     mapcompare(dct, colmap1=colmap1, colmap2=colmap2,\
               sidelength_tot=sidelength_tot, aexp=aexp, clabel1=clabel1, clabel2=clabel2, 
               csize=R200, info=info, savename=savename, slc=slc,\
               vmin1=vmin1, vmin2=vmin2, vmax1=vmax1, vmax2=vmax2)

def mapcompare(dct, colmap1='viridis', colmap2='cubehelix',\
               sidelength_tot=100., aexp=1., clabel1=None, clabel2=None, 
               csize=None, info=None, savename=None, slc=None,\
               vmin1=None, vmin2=None, vmax1=None, vmax2=None):
    '''
    sidelength_tot: cMpc
    csize: pkpc
    '''
    fontsize=12
    
    img1 = dct['img1']
    img2 = dct['img2']
    
    fig = plt.figure(figsize=(12., 4.5))
    grid = gsp.GridSpec(1, 4, width_ratios=[5., 1., 5., 1.], wspace=0.25, hspace=0.)
    axes = [plt.subplot(grid[i]) for i in range(4)]
    
    axes[0].patch.set_facecolor(cm.get_cmap(colmap1)(0.))
    axes[1].patch.set_facecolor(cm.get_cmap(colmap2)(0.))
    
    totsize = sidelength_tot * aexp
    extent = (float(slc[0].start)    / float(img1.shape[0]) * totsize,\
              float(slc[0].stop + 1) / float(img1.shape[0]) * totsize,\
              float(slc[1].start)    / float(img1.shape[1]) * totsize,\
              float(slc[1].stop + 1) / float(img1.shape[1]) * totsize)
    print extent
    img0 = axes[0].imshow(img1[slc].T, origin='lower', interpolation='nearest',\
               extent=extent, vmin=vmin1, vmax=vmax1, cmap=colmap1)
    plt.colorbar(img0, cax=axes[1], extend='min', orientation='vertical')
    axes[1].set_ylabel(clabel1, fontsize=fontsize)
    if csize is not None:
        crc = plt.Circle(((extent[0] + extent[1]) / 2., (extent[2] + extent[3]) / 2.), csize * 1e-3, edgecolor='red', fill=False)
        axes[0].add_patch(crc)

    img1 = axes[2].imshow(img2[slc].T, origin='lower', interpolation='nearest',\
               extent=extent, vmin=vmin2, vmax=vmax2, cmap=colmap2)
    plt.colorbar(img1, cax=axes[3], extend='min', orientation='vertical')
    axes[3].set_ylabel(clabel2, fontsize=fontsize)
    if csize is not None:
        crc = plt.Circle(((extent[0] + extent[1]) / 2., (extent[2] + extent[3]) / 2.), csize * 1e-3, edgecolor='red', fill=False)
        axes[2].add_patch(crc)
        
    axes[0].set_xlabel('X [pMpc]', fontsize=fontsize)
    axes[2].set_xlabel('X [pMpc]', fontsize=fontsize)
    axes[0].set_ylabel('Y [pMpc]', fontsize=fontsize)
    for ax in axes:
        ax.tick_params(labelsize=fontsize - 1)
    axes[1].set_aspect(10.)
    axes[3].set_aspect(10.)
    axes[2].tick_params(labelleft=False)
    fig.suptitle(info, fontsize=fontsize)
    if savename is not None:
        plt.savefig(savename, bbox_inches='tight')
    
   
def collageplot_horiz1(ims,imname,colmaps,Vmins,Vmaxs):
    # assumes same color scale accross rows
    # needs colmap, Vmin, Vmax for each column
    
    shape = tuple(np.array(ims.shape)[:-2]) # last two shape values are the image dimensions
    figsize = (5.*(shape[1]),5.*(shape[0]))
    fig, axes = plt.subplots(*shape, sharex='col', sharey='row',figsize=figsize)

    # turn off axis ticks and space between and around subplots
    for ax in np.ndarray.flatten(axes):
        ax.minorticks_off()
        ax.xaxis.set_major_locator(plt.NullLocator()) # turns off x axis ticks
        ax.yaxis.set_major_locator(plt.NullLocator())   
        #ax.set_aspect(1., adjustable='box-forced')
    fig.subplots_adjust(left=0., bottom=0., right=1., top=1., wspace=0., hspace=0.)

    # plots: same colormap, Vmin, Vmax through each column
    for col in range(shape[1]):
        for row in range(shape[0]):
            ax = axes[row,col]
            ax.patch.set_facecolor(cm.get_cmap(colmaps[col])(0.))
            img = ax.imshow((ims[row,col]).T,origin='lower', cmap=cm.get_cmap(colmaps[col]), vmin = Vmins[col], vmax=Vmaxs[col],interpolation='nearest')   
    
    plt.savefig(imname,format = 'png',bbox_inches='tight')
    plt.close()
    return 0

def collageplot_horizc(ims,imname,colmaps,Vmins,Vmaxs,clabels=None):
    # assumes same color scale accross rows
    # needs colmap, Vmin, Vmax for each column
    
    shape = tuple(np.array(ims.shape)[:-2]) # last two shape values are the image dimensions
    ncols = shape[1]
    nrows = shape[0]
    fig = plt.figure(figsize=(5.*ncols,5.*nrows+1.))
    grid = gsp.GridSpec(nrows+1,ncols,height_ratios=list((5.,)*nrows)+[1.])
    grid.update(left=0., bottom=0., right=1., top=1., wspace=0., hspace=0.)

    axes = np.empty((nrows+1,ncols),dtype=object)
    for col in range(ncols):
        for row in range(nrows+1):
            axes[row,col] = plt.subplot(grid[ncols*row+col])    
    # turn off axis ticks and space between and around subplots
    for ax in np.ndarray.flatten(axes[nrows,:]):  
        ax.set_aspect(0.1, adjustable='box-forced')
    for ax in np.ndarray.flatten(axes[:nrows,:]):
        ax.minorticks_off()
        ax.xaxis.set_major_locator(plt.NullLocator()) # turns off x axis ticks
        ax.yaxis.set_major_locator(plt.NullLocator())   
    #    ax.set_aspect(1., adjustable='box-forced')



    # plots: same colormap, Vmin, Vmax through each column
    for col in range(ncols):
        for row in range(nrows):
            ax = axes[row,col]
            ax.patch.set_facecolor(cm.get_cmap(colmaps[col])(0.))
            img = ax.imshow((ims[row,col]).T,origin='lower', cmap=cm.get_cmap(colmaps[col]), vmin = Vmins[col], vmax=Vmaxs[col],interpolation='nearest')  
    
    fontsize=28
    for col in range(ncols):
        ax = axes[nrows,col]
        cmap = mpl.cm.get_cmap(colmaps[col])
        norm = mpl.colors.Normalize(vmin=Vmins[col],vmax=Vmaxs[col])
        cbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap,norm=norm,orientation='horizontal')
        ax.tick_params(labelsize=fontsize-2)
        if clabels != None:
            cbar.set_label(clabels[col],fontsize=fontsize)
            
 
    
    plt.savefig(imname,format = 'png',bbox_inches='tight')
    plt.close()
    return 0

def collageplot_vert1(ims,imname,colmaps,Vmins,Vmaxs):
    # assumes same color scale accross rows
    # needs colmap, Vmin, Vmax for each column
    
    shape = tuple(np.array(ims.shape)[:-2]) # last two shape values are the image dimensions
    figsize = (5.*shape[1],5.*shape[0])
    fig, axes = plt.subplots(*shape, sharex='col', sharey='row',figsize=figsize)

    # turn off axis ticks and space between and around subplots
    for ax in np.ndarray.flatten(axes):
        ax.minorticks_off()
        ax.xaxis.set_major_locator(plt.NullLocator()) # turns off x axis ticks
        ax.yaxis.set_major_locator(plt.NullLocator())
        #ax.set_aspect('equal', adjustable='box')
    fig.subplots_adjust(left=0., bottom=0., right=1., top=1., wspace=0., hspace=0.)

    # plots: same colormap, Vmin, Vmax through each column
    for col in range(shape[1]):
        for row in range(shape[0]):
            ax = axes[row,col]
            ax.patch.set_facecolor(cm.get_cmap(colmaps[row])(0.))
            img = ax.imshow((ims[row,col]).T,origin='lower', cmap=cm.get_cmap(colmaps[row]), vmin = Vmins[row], vmax=Vmaxs[row],interpolation='nearest')   
    
    plt.savefig(imname,format = 'png',bbox_inches='tight')
    plt.close()
    return 0

def collageplot_vertc(ims,imname,colmaps,Vmins,Vmaxs,clabels=None):
    # assumes same color scale accross rows
    # needs colmap, Vmin, Vmax for each column
    
    shape = tuple(np.array(ims.shape)[:-2]) # last two shape values are the image dimensions
    ncols = shape[1]
    nrows = shape[0]
    fig = plt.figure(figsize=(5.*ncols +1.,5.*nrows))
    grid = gsp.GridSpec(nrows,ncols+1,width_ratios=list((5.,)*ncols)+[1.])
    grid.update(left=0., bottom=0., right=1., top=1., wspace=0., hspace=0.)

    axes = np.empty((nrows,ncols+1),dtype=object)
    for col in range(ncols+1):
        for row in range(nrows):
            axes[row,col] = plt.subplot(grid[(ncols+1)*row+col])    
    # turn off axis ticks and space between and around subplots
    for ax in np.ndarray.flatten(axes[:,ncols]):  
        ax.set_aspect(10., adjustable='box-forced')
    for ax in np.ndarray.flatten(axes[:,:ncols]):
        ax.minorticks_off()
        ax.xaxis.set_major_locator(plt.NullLocator()) # turns off x axis ticks
        ax.yaxis.set_major_locator(plt.NullLocator())   
    #    ax.set_aspect(1., adjustable='box-forced')



    # plots: same colormap, Vmin, Vmax through each column
    for col in range(ncols):
        for row in range(nrows):
            ax = axes[row,col]
            ax.patch.set_facecolor(cm.get_cmap(colmaps[row])(0.))
            img = ax.imshow((ims[row,col]).T,origin='lower', cmap=cm.get_cmap(colmaps[row]), vmin = Vmins[row], vmax=Vmaxs[row],interpolation='nearest')  
    
    fontsize=28
    for row in range(nrows):
        ax = axes[row,ncols]
        cmap = mpl.cm.get_cmap(colmaps[row])
        norm = mpl.colors.Normalize(vmin=Vmins[row],vmax=Vmaxs[row])
        cbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap,norm=norm,orientation='vertical')
        ax.tick_params(labelsize=fontsize-2)
        if clabels != None:
            cbar.set_label(clabels[row],fontsize=fontsize)
            
 
    
    plt.savefig(imname,format = 'png',bbox_inches='tight')
    plt.close()
    return 0




def make_coldens_hist_slices(namebase,fills, L_z, redshift, numbins = 50, colmin = None,colmax = None, add=1 ,offset=0, red=1,save=None,sel = (slice(None,None,None),slice(None,None,None))):
    '''
     returns d n_sightnlines / dN dX (not /d log N)
     combines all input slices if add =1
     if add =/= 1: adds <add> slices (must be integer factor of len(fills)), 
       using <fills> in order (mod len(fills)) starting at index <offset>
     add option used for slice thickness convergence tests
     red: factor by which to reduce pixel size (factor in imreduce) -- for pixel size convergence tests
     save: file name to save result to (in proc directory); None -> not saved
     !!! L_z should be for the individual slices (add=1) or slabs: L_z = add * boxlength/(number of slices), not the whole box !!!
    '''    
    # determine overall maximum and minimum, so that the bins all match up
    if add ==1: 
        if colmin == None or colmax == None:  
            fmin = False
            fmax = False
            if colmin == None:
                colmin = 1e60
                fmin = True
            if colmax == None:
                colmax = -1e60
                fmax = True  
        
            for fill in fills: 
                if red ==1: 
                    cols = np.load(namebase%fill)['arr_0'][sel]
                else:
                    cols = imreduce(np.load(namebase%fill)['arr_0'][sel],red)
            
                if fmin:
                    cmin = np.min(cols[np.isfinite(cols)])
                    colmin = min(cmin,colmin)
                if fmax:
                    cmax = np.max(cols[np.isfinite(cols)]) 
                    colmax = max(cmax,colmax)
        print('Minimum log10 column density: %s, maximum log10 column density: %s\n'%(str(colmin), str(colmax)))

        bins = np.zeros(numbins)
        edges = np.zeros(numbins)
        for fill in fills:
            if red ==1:
                nbins, nedges = make_coldens_hist(np.load(namebase%fill)['arr_0'][sel], L_z, redshift, bins = numbins, colmin = colmin,colmax = colmax)
            else:
                nbins, nedges = make_coldens_hist(imreduce(np.load(namebase%fill)['arr_0'][sel],red), L_z, redshift, bins = numbins, colmin = colmin,colmax = colmax)
            bins += nbins/np.float(len(fills))
            print('All except first should be equal to %s: %s'%(str(numbins),str(sum(edges == nedges))))        
            edges = nedges
    # divide bins by number of slices considered at the end: total numer of pixels considered  = number of pixels per slice x number of slices  



    else: # add =/= 1
        fills = np.array(fills)
        fills = np.roll(fills,-1*offset) # first slice starts at slice #<offset>
        if len(fills) % add != 0:
            print('Add option must divide the number of slices.\n')
            return None
        nslabs = len(fills)/add

        if colmin == None or colmax == None:  
            fmin = False
            fmax = False
            if colmin == None:
                colmin = 1e60
                fmin = True
            if colmax == None:
                colmax = -1e60
                fmax = True  

            for slind in range(nslabs):
                
                fill = fills[slind*add]
                if red ==1: 
                    cols = 10**np.load(namebase%fill)['arr_0'][sel]
                else:
                    cols = 10**imreduce(np.load(namebase%fill)['arr_0'][sel],red)
                
                for i in 1+np.array(range(add-1)):
                    fill = fills[slind*add + i]
                    if red ==1: 
                        cols += 10**np.load(namebase%fill)['arr_0'][sel]
                    else:
                        cols += 10**imreduce(np.load(namebase%fill)['arr_0'][sel],red)
                cols = np.log10(cols)

                if fmin:
                    cmin = np.min(cols[np.isfinite(cols)])
                    colmin = min(cmin,colmin)
                if fmax:
                    cmax = np.max(cols[np.isfinite(cols)]) 
                    colmax = max(cmax,colmax)
        print('Minimum log10 column density: %s, maximum log10 column density: %s\n'%(str(colmin), str(colmax)))

        bins = np.zeros(numbins)
        edges = np.zeros(numbins)
        for slind in range(nslabs):
                
            fill = fills[slind*add]
            if red ==1: 
                cols = 10**np.load(namebase%fill)['arr_0'][sel]
            else:
                cols = 10**imreduce(np.load(namebase%fill)['arr_0'][sel],red)
            
            for i in 1+np.array(range(add-1)):
                fill = fills[slind*add + i]
                if red ==1: 
                    cols += 10**np.load(namebase%fill)['arr_0'][sel]
                else:
                    cols += 10**imreduce(np.load(namebase%fill)['arr_0'][sel],red)
            cols = np.log10(cols)
            nbins, nedges = make_coldens_hist(cols, L_z, redshift, bins = numbins, colmin = colmin,colmax = colmax)
            
            bins += nbins/nslabs # number of slabs replace numer of slices in add == 1 case
            print('All except first should be equal to %s: %s'%(str(numbins),str(sum(edges == nedges))))        
            edges = nedges
    # divide bins y number of slices considered at the end: total numer of pixels considered  = number of pixels per slice x number of slices  
    print('loop finished')    



    if save is not None:
        print('saving %s'%('/cosma5/data/dp004/dc-wije1/line_em_abs/proc/'+save))
        np.savez('/cosma5/data/dp004/dc-wije1/line_em_abs/proc/'+save,bins=bins,logedges=edges)

    return bins, edges






def cddfplot(binsedges, name,title = 'CDDF',xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$',ylabel =r'$N_{pix}^{-1} \; \partial^2 N_{pix}/ \partial N \partial X  $',colors = None, labels = None,linestyles=None):
    '''
    input: 
    binedges:   list of bins,edges to plot
    '''

    fig = plt.figure(figsize=(5.5,5.))
    ax = plt.subplot(111)
    ax.minorticks_on()
    plt.title(title)
    ax.set_xlabel(xlabel,fontsize=14)
    ax.set_ylabel(ylabel,fontsize=14)
    ax.set_yscale('log', nonposy='clip')
    ax.tick_params(labelsize=13)
    #ax.set_xlim(8.,15.)
    #ax.set_ylim(1e-20,1e-5)
    ax.set_xlim(11.,17)
    ax.set_ylim(1e-23,1e-9)
    
    numh = len(binsedges)
    if colors == None:
        colors = ['blue','red','green','gray','orange','purple','gold','cyan','black']
    if numh >len(colors):
        print('Use a larger color array')
    if labels == None:
        labels = list((None,)*numh)
    if linestyles == None: 
        linestyles = list(('solid',)*numh)

    for i in range(numh):
        ax.step(binsedges[i][1],binsedges[i][0],where = 'post',color=colors[i], label = labels[i], linewidth=2,linestyle=linestyles[i])

    plt.legend(fontsize=13)
    #ax.set_aspect('equal')
    fig.tight_layout()
    #plt.savefig(name)

def phasediagplot(img,ext,imname,clabel='',title='',colmap = 'viridis', Vmin = None, Vmax= None, xlabel = r'$ \log_{10} n_H \, [\mathrm{cm}^{-3}]$', ylabel = r'$\log_{10} T \, [K]$',fontsize=13):

    data = img
        
    fig = plt.figure(figsize = (5.5, 5.)) # large size just as a trick to get higher resolution
    ax = plt.subplot(111)   
    ax.set_xlabel(xlabel,fontsize=fontsize+1)
    ax.set_ylabel(ylabel,fontsize=fontsize+1)
    ax.minorticks_on()
    ax.tick_params(labelsize=fontsize)
    ax.patch.set_facecolor(cm.get_cmap(colmap)(0.)) # sets background color to lowest color map value 
    img = ax.imshow(data.T,extent=(ext[0],ext[1],ext[2],ext[3]),origin='lower', cmap=cm.get_cmap(colmap), vmin = Vmin, vmax=Vmax,interpolation='nearest', aspect=(ext[1]-ext[0])/(ext[3]-ext[2]))
    plt.title(title,fontsize=fontsize)
    div = axgrid.make_axes_locatable(ax)
    cax = div.append_axes("right",size="5%",pad=0.)
    cbar = plt.colorbar(img, cax=cax)
    cbar.solids.set_edgecolor("face")
    cbar.ax.set_ylabel(r'%s' % (clabel), fontsize=fontsize)
    cbar.ax.tick_params(labelsize=fontsize)
    # save PDF figure
    #plt.subplots_adjust(left=0, bottom=0, right=1, top=1,hspace=0,wspace=0)
    fig.tight_layout()    
    #fig.subplots_adjust(right=0.88)
    plt.savefig(imname,format = 'png')
    plt.close()
    return 0


def readin_cddf_set(filename, fills):
    dct = {}
    for fill in fills:
        dct[fill] = np.load(filename%fill)
        dct[fill] = [dct[fill]['bins'],dct[fill]['logedges']]
    return dct


















###########################################
# Figures for the O vii/O viii CDDF paper #
###########################################

def getcddf(name,norm = None):
    if name[-4:] != '.npz':
        name = name + '.npz'
    temp = np.load(pdir + name)
    temp = [temp['bins'],temp['logedges']]
    if norm is not None:
        temp[0] = temp[0]/norm[0]
    return temp

def add_colorbar(ax,img=None,vmin=None,vmax=None,cmap=None,clabel=None,newax=False,extend='neither',fontsize=12.,orientation='vertical'):
    if img is None:
        cmap = mpl.cm.get_cmap(cmap)
        norm = mpl.colors.Normalize(vmin=vmin,vmax=vmax)
        cbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap,norm=norm,extend=extend,orientation=orientation)
    elif newax:
        div = axgrid.make_axes_locatable(ax)
        cax = div.append_axes("right", size="5%", pad=0.2)
        cbar = mpl.colorbar.Colorbar(cax,img,extend=extend)
    else:
        cbar = mpl.colorbar.Colorbar(ax,img,extend=extend,orientation=orientation)
    ax.tick_params(labelsize=fontsize)
    if clabel is not None:
        cbar.set_label(clabel,fontsize=fontsize)
        
def cddfsubplot1(ax, binsedges, subtitle = 'CDDF', subfigind = None, subtitleloc=None, subfigindloc=None,\
                 xlabel=None, ylabel=None, fontsize=14,\
                 colors = None, labels=None, linestyles=None, alphas=None,\
                 xlim=(11.,17.), ylim=(1e-23,1e-9), xticklabels=True, yticklabels=True,  ylog = True, takeylog=False, steppost=True,\
                 legendloc=None, legend_ncol=1, legend_title = None, dolegend=True):
    '''
    function with many, many options because it is used for basically all the subplots in the mulitplot functions below
    input:      ax: ax object to plot cddfs in
    binedges:   list of bins,edges to plot
    '''

    
    #plt.title(title)
    if xlabel is not None:
        ax.set_xlabel(xlabel,fontsize=fontsize)
    if ylabel is not None:
        ax.set_ylabel(ylabel,fontsize=fontsize)
    if ylog:
        ax.set_yscale('log', nonposy='clip')
    ax.tick_params(labelsize=fontsize-1,direction='in',top=True,right=True, which = 'both')
    ax.minorticks_on()
    #ax.set_xlim(8.,15.)
    #ax.set_ylim(1e-20,1e-5)
    if xlim is not None:
        ax.set_xlim(*xlim)
    if ylim is not None:
        ax.set_ylim(*ylim)
    #if not xticklabels:
    #    ax.xaxis.set_major_locator(plt.NullLocator()) # turns off x axis ticks
    #if not yticklabels:
    #    ax.yaxis.set_major_locator(plt.NullLocator())   
    if subtitle is not None:
        if subtitleloc is None:
            subtitleloc = (0.95, 0.95)
        ax.text(subtitleloc[0],subtitleloc[1],subtitle,fontsize=fontsize, horizontalalignment = 'right', verticalalignment = 'top', transform=ax.transAxes, bbox=dict(facecolor='white',alpha=0.3))
    if subfigind is not None:
        if subfigindloc is None:
            ax.text(0.85,0.05,subfigind,fontsize=fontsize, horizontalalignment = 'right', verticalalignment = 'bottom', transform=ax.transAxes)
        else: 
            ax.text(subfigindloc[0],subfigindloc[1],subfigind,fontsize=fontsize, horizontalalignment = 'right', verticalalignment = 'bottom', transform=ax.transAxes)
    numh = len(binsedges)
    if colors is None:
        colors = ['blue','red','green','gray','orange','purple','gold','cyan','black']
    elif not (isinstance(colors, list) or isinstance(colors, tuple) or isinstance(colors, np.ndarray)):
         colors = (colors,)*numh
    elif numh >len(colors):
        print('Use a larger color array')
    if labels is None:
        labels = list((None,)*numh)
    if linestyles is None: 
        linestyles = list(('solid',)*numh)
    if alphas is None:
        alphas = [1.] * numh
    kwargs = {}

    for i in range(numh):
        if linestyles[i] == 'dashdotdot':
            linestyles[i] = 'dashed'
            kwargs = {'dashes': [4, 2, 1, 2, 1, 2]}
        elif 'dashes' in kwargs.keys():
            del kwargs['dashes']

        if steppost:
            if takeylog: # plot log10 y values
                ax.step(binsedges[i][1],np.log10(binsedges[i][0]),where = 'post',color=colors[i], label = labels[i], linewidth=2,linestyle=linestyles[i], alpha=alphas[i], **kwargs)
            else:
                ax.step(binsedges[i][1],binsedges[i][0],where = 'post',color=colors[i], label = labels[i], linewidth=2,linestyle=linestyles[i], alpha=alphas[i], **kwargs)
        else: #just plot a line: more suitable for cumulative plots
            if takeylog: # plot log10 y values
                ax.plot(binsedges[i][1],np.log10(binsedges[i][0]),color=colors[i], label = labels[i], linewidth=2,linestyle=linestyles[i], alpha=alphas[i], **kwargs)
            else:
                ax.plot(binsedges[i][1],binsedges[i][0],color=colors[i], label = labels[i], linewidth=2,linestyle=linestyles[i], alpha=alphas[i], **kwargs)
    if dolegend:
        if legendloc is None:
            ax.legend(fontsize=fontsize, title = legend_title)
        else:
            ax.legend(fontsize=fontsize,loc = legendloc,ncol = legend_ncol, title = legend_title)
    #ax.set_aspect('equal')


def suplabel(fig, axis,label,label_prop=None,
             labelpad=5,
             ha='center',va='center'):
    ''' Add super ylabel or xlabel to the figure
    Similar to matplotlib.suptitle
    axis       - string: "x" or "y"
    label      - string
    label_prop - keyword dictionary for Text
    labelpad   - padding from the axis (default: 5)
    ha         - horizontal alignment (default: "center")
    va         - vertical alignment (default: "center")
    '''
    xmin = []
    ymin = []
    for ax in fig.axes:
        xmin.append(ax.get_position().xmin)
        ymin.append(ax.get_position().ymin)
    xmin,ymin = min(xmin),min(ymin)
    dpi = fig.dpi
    if axis.lower() == "y":
        rotation=90.
        x = xmin-float(labelpad)/dpi
        y = 0.5
    elif axis.lower() == 'x':
        rotation = 0.
        x = 0.5
        y = ymin - float(labelpad)/dpi
    else:
        raise Exception("Unexpected axis: x or y")
    if label_prop is None: 
        label_prop = dict()
    fig.text(x,y,label,rotation=rotation,
               transform=fig.transFigure,
               ha=ha,va=va,
               **label_prop)

def implot_o7_o8(fontsize=12, im_o8=None, im_o7=None):

    fig = plt.figure(figsize=(5.5, 11.))     
    grid = gsp.GridSpec(4,1, height_ratios = [5.,5., 0.35, 0.4], wspace=0.0,hspace=0.05, top=0.95, bottom = 0.05, left = 0.05, right=0.95) # grispec: nrows, ncols
    ax1 = fig.add_subplot(grid[0, 0])
    ax2 = fig.add_subplot(grid[1, 0])
    cax = fig.add_subplot(grid[3, 0])

    # load beforehand for iteration: faster
    if im_o8 is None:
        file_o8 = 'coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-sum_z-projection_T4EOS_totalbox.npz'
        im_o8 = imreduce(np.load(ndir + file_o8)['arr_0'],80) # 32000 -> 400 pixels
    if im_o7 is None:
        file_o7 = 'coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-sum_z-projection_T4EOS_totalbox.npz'
        im_o7 = imreduce(np.load(ndir + file_o7)['arr_0'],80) # 32000 -> 400 pixels
   
    img = ax1.imshow(im_o7.T,origin='lower',extent = (0.,100.,0.,100.),cmap='cubehelix',vmin=12.5,vmax=16.4)
    ax2.imshow(im_o8.T,origin='lower',extent = (0.,100.,0.,100.),cmap='cubehelix',vmin=12.5,vmax=16.4)   

    # set labels and font sizes
    ax1.tick_params(labelsize=fontsize, axis='both', labelbottom=False)
    ax2.tick_params(labelsize=fontsize, axis='both')
    
    #ax1.set_xlabel('X [cMpc]', fontsize=fontsize)
    ax1.set_ylabel('Y [cMpc]', fontsize=fontsize)
    ax2.set_xlabel('X [cMpc]', fontsize=fontsize)
    ax2.set_ylabel('Y [cMpc]', fontsize=fontsize)
    
    ax1.text(0.05, 0.95, 'O VII',  fontsize=fontsize, horizontalalignment = 'left', verticalalignment = 'top', transform=ax1.transAxes, color='blue', bbox=dict(facecolor='white',alpha=0.4))
    ax2.text(0.05, 0.95, 'O VIII', fontsize=fontsize, horizontalalignment = 'left', verticalalignment = 'top', transform=ax2.transAxes, color='blue', bbox=dict(facecolor='white',alpha=0.4))
    #ax1.text(0.95, 0.05, '(a)', fontsize=fontsize, horizontalalignment = 'right', verticalalignment = 'bottom', transform=ax1.transAxes, color='blue', bbox=dict(facecolor='white',alpha=0.3))
    #ax2.text(0.95, 0.05, '(b)', fontsize=fontsize, horizontalalignment = 'right', verticalalignment = 'bottom', transform=ax2.transAxes, color='blue', bbox=dict(facecolor='white',alpha=0.3))

    # set up the color bar
    #add_colorbar(ax3,img=img,clabel = r'$\log_{10} N_{\mathrm{ion}} \, [\mathrm{cm}^{-2}]$',extend='both') 
    #ax3.set_aspect(10.,adjustable='box-forced')
    add_colorbar(cax, img=img, vmin=None, vmax=None, cmap=None, clabel=r'$\log_{10} N_{\mathrm{ion}} \, [\mathrm{cm}^{-2}]$', newax=False, extend='min',fontsize=fontsize, orientation='horizontal')
    cax.tick_params(labelsize=fontsize, axis='both')
    cax.set_aspect(0.07)
    plt.savefig(mdir + 'coldens_o7-o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix-redto-400_6.25slice_zcen-sum_z-projection_T4EOS_totalbox.pdf' ,format = 'pdf',bbox_inches = 'tight')



def cddfplots1(name, fontsize =14):
    '''
    pixel size and slice number convergence plot: 2x2, 
    + ------- + ------ +
    | O7, pix | O7, sl |
    + ------- + ------ +
    | O8, pix | O8, sl |
    + ------- + ------ +
    '''

    # load all the data
    cddf_base_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o7 = [cddf_base_o7['bins'],cddf_base_o7['logedges']]
    cddf_p16_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix-redto-16000_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_p16_o7 = [cddf_p16_o7['bins'],cddf_p16_o7['logedges']]
    cddf_p8_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix-redto-8000_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_p8_o7 = [cddf_p8_o7['bins'],cddf_p8_o7['logedges']]
    cddf_p4_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix-redto-4000_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_p4_o7 = [cddf_p4_o7['bins'],cddf_p4_o7['logedges']]
    binsedges_pix_o7 = [cddf_base_o7,cddf_p16_o7,cddf_p8_o7,cddf_p4_o7]

    cddf_base_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o8 = [cddf_base_o8['bins'],cddf_base_o8['logedges']]
    cddf_p16_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix-redto-16000_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_p16_o8 = [cddf_p16_o8['bins'],cddf_p16_o8['logedges']]
    cddf_p8_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix-redto-8000_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_p8_o8 = [cddf_p8_o8['bins'],cddf_p8_o8['logedges']]
    cddf_p4_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix-redto-4000_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_p4_o8 = [cddf_p4_o8['bins'],cddf_p4_o8['logedges']]
    binsedges_pix_o8 = [cddf_base_o8,cddf_p16_o8,cddf_p8_o8,cddf_p4_o8]

    cddf_8sl0_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_8-x-6.250000-addto-12.500000slices_offset0_300-bins_fullrange.npz')
    cddf_8sl0_o7 = [cddf_8sl0_o7['bins'],cddf_8sl0_o7['logedges']]
    cddf_8sl1_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_8-x-6.250000-addto-12.500000slices_offset1_300-bins_fullrange.npz')
    cddf_8sl1_o7 = [cddf_8sl1_o7['bins'],cddf_8sl1_o7['logedges']]
    cddf_4sl0_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_4-x-6.250000-addto-25.000000slices_offset0_300-bins_fullrange.npz')
    cddf_4sl0_o7 = [cddf_4sl0_o7['bins'],cddf_4sl0_o7['logedges']]
    cddf_4sl1_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_4-x-6.250000-addto-25.000000slices_offset1_300-bins_fullrange.npz')
    cddf_4sl1_o7 = [cddf_4sl1_o7['bins'],cddf_4sl1_o7['logedges']]
    cddf_4sl2_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_4-x-6.250000-addto-25.000000slices_offset2_300-bins_fullrange.npz')
    cddf_4sl2_o7 = [cddf_4sl2_o7['bins'],cddf_4sl2_o7['logedges']]
    cddf_4sl3_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_4-x-6.250000-addto-25.000000slices_offset3_300-bins_fullrange.npz')
    cddf_4sl3_o7 = [cddf_4sl3_o7['bins'],cddf_4sl3_o7['logedges']]
    binsedges_sl_o7 = [cddf_base_o7,cddf_8sl0_o7,cddf_8sl1_o7,cddf_4sl0_o7,cddf_4sl1_o7,cddf_4sl2_o7,cddf_4sl3_o7]

    cddf_8sl0_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_8-x-6.250000-addto-12.500000slices_offset0_300-bins_fullrange.npz')
    cddf_8sl0_o8 = [cddf_8sl0_o8['bins'],cddf_8sl0_o8['logedges']]
    cddf_8sl1_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_8-x-6.250000-addto-12.500000slices_offset1_300-bins_fullrange.npz')
    cddf_8sl1_o8 = [cddf_8sl1_o8['bins'],cddf_8sl1_o8['logedges']]
    cddf_4sl0_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_4-x-6.250000-addto-25.000000slices_offset0_300-bins_fullrange.npz')
    cddf_4sl0_o8 = [cddf_4sl0_o8['bins'],cddf_4sl0_o8['logedges']]
    cddf_4sl1_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_4-x-6.250000-addto-25.000000slices_offset1_300-bins_fullrange.npz')
    cddf_4sl1_o8 = [cddf_4sl1_o8['bins'],cddf_4sl1_o8['logedges']]
    cddf_4sl2_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_4-x-6.250000-addto-25.000000slices_offset2_300-bins_fullrange.npz')
    cddf_4sl2_o8 = [cddf_4sl2_o8['bins'],cddf_4sl2_o8['logedges']]
    cddf_4sl3_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_4-x-6.250000-addto-25.000000slices_offset3_300-bins_fullrange.npz')
    cddf_4sl3_o8 = [cddf_4sl3_o8['bins'],cddf_4sl3_o8['logedges']]
    binsedges_sl_o8 = [cddf_base_o8,cddf_8sl0_o8,cddf_8sl1_o8,cddf_4sl0_o8,cddf_4sl1_o8,cddf_4sl2_o8,cddf_4sl3_o8]

    ncols = 2
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=nrows,ncols=ncols,sharex=True,sharey=True)  

    cddfsubplot1(ax1, binsedges_pix_o7,subtitle = 'O VII', subfigind = '(a)', xlabel=None, ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['red','sienna','maroon','salmon'], labels = ['32k pix','16k pix',' 8k pix',' 4k pix'], linestyles=['solid','dashed','dashdot','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=(1e-23,1e-9), xticklabels=False)
    cddfsubplot1(ax3, binsedges_pix_o8,subtitle = 'O VIII', subfigind = '(c)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['blue','navy','dodgerblue','cyan'], labels = ['32k pix','16k pix',' 8k pix',' 4k pix'], linestyles=['solid','dashed','dashdot','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=(1e-23,1e-9))
    cddfsubplot1(ax2, binsedges_sl_o7,subtitle = 'O VII', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['red','darkred','darkred','chocolate', 'chocolate','chocolate','chocolate'], labels = ['16 slices',' 8 slices', None,' 4 slices', None,None,None], linestyles =['solid','dashed','dashed','dotted','dotted','dotted','dotted'], fontsize = fontsize, xlim = (11.,17.), ylim =(1e-23,1e-9), xticklabels = False, yticklabels = False)
    cddfsubplot1(ax4, binsedges_sl_o8,subtitle = 'O VIII', subfigind = '(d)', xlabel = r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$' ,ylabel = None, colors = ['blue','darkslateblue','darkslateblue','steelblue', 'steelblue','steelblue','steelblue'], labels = ['16 slices',' 8 slices', None,' 4 slices', None,None,None], linestyles = ['solid','dashed','dashed','dotted','dotted','dotted','dotted'], fontsize = fontsize, xlim = (11.,17.), ylim =(1e-23,1e-9), xticklabels = False, yticklabels = False)

    fig.tight_layout()
    plt.savefig(name)


def cddfplots1_relative(name='cddf_coldens_o78_L0100N1504_27_test3.1_PtAb_C2Sm_pixvar_slicevar_zcen-all_z-projection_incl_testregions_pixslconv_relative.pdf', fontsize =12):
    '''
    pixel size and slice number convergence plot: 2x2,
    pix1: lower res, pix2: higher res in subregions
    + -------- + -------- +
    | O7, pix1 | O8, pix1 |
    + -------- + -------- +
    | O7, pix2 | O8, pix2 |
    + -------- + -------- +
    | O7, sl   | O8, sl   |
    + -------- + -------- +
    '''

    # load all the data
    
    o7base =  getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=None)
    o7_4sl =  getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_4-x-6.250000-addto-25.000000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o7base)
    o7_8sl =  getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000-addto-12.500000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o7base)
    o7_32sl = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_3.125slice_zcen-all_z-projection_T4EOS_32-x-3.125000slices_range-25.0-28.0_1060bins.npz', norm=o7base)
    o7base_n = [o7base[0]/o7base[0], o7base[1]]
    binsedges_sl_o7_n = [o7_4sl, o7_8sl, o7base_n, o7_32sl]

    o7_16k = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix-redto-16000_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o7base)
    o7_8k = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix-redto-8000_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o7base)
    o7_4k = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix-redto-4000_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o7base)
    binsedges_pix1_o7_n = [o7base_n, o7_16k, o7_8k, o7_4k]
    
    o7_288k_t1 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=None) 
    o7_96k_t1 =  getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o7_288k_t1)
    o7_32kr_t1 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o7_288k_t1)
    o7_32k_t1z = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_slice(24000,27200,1)-slice(0,3200,1)_range-25.0-28.0_1060bins.npz', norm=o7_288k_t1)
    o7_288k_t2 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x15.0-pm10.0_y80.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=None) 
    o7_96k_t2 =  getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x15.0-pm10.0_y80.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o7_288k_t2)
    o7_32kr_t2 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x15.0-pm10.0_y80.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o7_288k_t2)
    o7_32k_t2z = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_slice(3200,6400,1)-slice(24000,27200,1)_range-25.0-28.0_1060bins.npz', norm=o7_288k_t2)
    o7_288k_t1_n = [o7_288k_t1[0]/o7_288k_t1[0], o7_288k_t1[1]]
    o7_288k_t2_n = [o7_288k_t2[0]/o7_288k_t2[0], o7_288k_t2[1]]
    binsedges_pix2_o7_n = [o7_32k_t1z, o7_32kr_t1, o7_96k_t1, o7_288k_t1_n, o7_32k_t2z, o7_32kr_t2, o7_96k_t2, o7_288k_t2_n]
    
    
    o8base =  getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=None)
    o8_4sl =  getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_4-x-6.250000-addto-25.000000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o8base)
    o8_8sl =  getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000-addto-12.500000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o8base)
    o8_32sl = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_3.125slice_zcen-all_z-projection_T4EOS_32-x-3.125000slices_range-25.0-28.0_1060bins.npz', norm=o8base)
    o8base_n = [o8base[0]/o8base[0], o8base[1]]
    binsedges_sl_o8_n = [o8_4sl, o8_8sl, o8base_n, o8_32sl]
    
    o8_16k = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix-redto-16000_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o8base)
    o8_8k = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix-redto-8000_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o8base)
    o8_4k = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix-redto-4000_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o8base)
    binsedges_pix1_o8_n = [o8base_n, o8_16k, o8_8k, o8_4k]
    
    o8_288k_t1 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=None) 
    o8_96k_t1 =  getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o8_288k_t1)
    o8_32kr_t1 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o8_288k_t1)
    o8_32k_t1z = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_slice(24000,27200,1)-slice(0,3200,1)_range-25.0-28.0_1060bins.npz', norm=o8_288k_t1)
    o8_288k_t2 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x15.0-pm10.0_y80.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=None) 
    o8_96k_t2 =  getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x15.0-pm10.0_y80.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o8_288k_t2)
    o8_32kr_t2 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x15.0-pm10.0_y80.0-pm10.0_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz', norm=o8_288k_t2)
    o8_32k_t2z = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_slice(3200,6400,1)-slice(24000,27200,1)_range-25.0-28.0_1060bins.npz', norm=o8_288k_t2)
    o8_288k_t1_n = [o8_288k_t1[0]/o8_288k_t1[0], o8_288k_t1[1]]
    o8_288k_t2_n = [o8_288k_t2[0]/o8_288k_t2[0], o8_288k_t2[1]]
    binsedges_pix2_o8_n = [o8_32k_t1z, o8_32kr_t1, o8_96k_t1, o8_288k_t1_n, o8_32k_t2z, o8_32kr_t2, o8_96k_t2, o8_288k_t2_n]
    
    ncols = 2
    nrows = 3

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6)) = plt.subplots(figsize=(5.5, 8.), nrows=nrows,ncols=ncols,sharex=True,sharey='row')  
    ylimpix2 = (-0.5, 0.6)
    cddfsubplot1(ax1, binsedges_pix1_o7_n,subtitle = 'O VII', subtitleloc=(0.25, 0.80), subfigind = '(a)', xlabel=None, ylabel=r'$\log_{10} \, f(N)\, /\, f(N, \mathrm{32k})$', colors = ['red','sienna','maroon','salmon'], labels = ['32k pix','16k pix',' 8k pix',' 4k pix'], linestyles=['solid','dashed','dashdot','dotted'], fontsize =fontsize, xlim = (11.,17.2), ylim=(-0.6, 0.1), xticklabels=False, ylog=False, takeylog=True)
    cddfsubplot1(ax2, binsedges_pix1_o8_n,subtitle = 'O VIII', subtitleloc=(0.27, 0.80), subfigind = '(b)', xlabel=None, ylabel=None, colors = ['blue','navy','dodgerblue','cyan'], labels = ['32k pix','16k pix',' 8k pix',' 4k pix'], linestyles=['solid','dashed','dashdot','dotted'], fontsize =fontsize, xlim = (11.,17.2), ylim=(-1, 0.1), ylog=False, takeylog=True)
    cddfsubplot1(ax3, binsedges_pix2_o7_n,subtitle = 'O VII', subtitleloc=(0.25, 0.40), subfigind = '(c)', xlabel=None , ylabel=r'$\log_{10} \, f(N) \,/\, f(N, \mathrm{288k})$', colors = ['red', 'mediumvioletred', 'brown', 'orange', 'red', 'mediumvioletred', 'brown', 'orange' ], labels=['32k pix', '32k pix (r)', '96k pix (r)', '288k pix', None, None, None, None], linestyles=['solid', 'dashed', 'dashdot', 'dotted', 'solid', 'dashed', 'dashdot', 'dotted'], fontsize = fontsize, xlim =(11.,17.2), ylim=ylimpix2, xticklabels = False, yticklabels = False, ylog=False, takeylog=True)
    cddfsubplot1(ax4, binsedges_pix2_o8_n,subtitle = 'O VIII', subtitleloc=(0.27, 0.40), subfigind = '(d)', xlabel=None, ylabel=None, colors = ['blue', 'darkslategray', 'mediumturquoise', 'cornflowerblue', 'blue', 'darkslategray', 'mediumturquoise', 'cornflowerblue'], labels=['32k pix', '32k pix (r)', '96k pix (r)', '288k pix', None, None, None, None], linestyles=['solid', 'dashed', 'dashdot', 'dotted', 'solid', 'dashed', 'dashdot', 'dotted'], fontsize = fontsize, xlim = (11.,17.2), ylim=ylimpix2, xticklabels = False, yticklabels = False, ylog=False, takeylog=True)
    cddfsubplot1(ax5, binsedges_sl_o7_n,subtitle = 'O VII', subfigind = '(e)', subfigindloc=(0.3, 0.05), xlabel=r'$ \log_{10}\, N_{\mathrm{O\, VII}}\; [\mathrm{cm}^{-2}]$', ylabel=r'$\log_{10} \, f(N)\,/ \,f(N, \mathrm{16})$', colors = ['chocolate', 'darkred', 'red', 'salmon'], labels = [' 4 slices',' 8 slices', '16 slices', '32 slices'], linestyles=['dotted', 'dashed', 'solid', 'dashdot'], fontsize = fontsize, xlim=(11.,17.2), ylim=(-1., 0.45), xticklabels = False, yticklabels = False, ylog=False, takeylog=True)
    cddfsubplot1(ax6, binsedges_sl_o8_n,subtitle = 'O VIII', subfigind = '(f)', subfigindloc=(0.3, 0.05), xlabel=r'$ \log_{10}\, N_{\mathrm{O\, VII}}\; [\mathrm{cm}^{-2}]$' ,ylabel=None, colors = ['steelblue', 'darkslateblue', 'blue', 'dodgerblue'], labels = ['4 slices', ' 8 slices', '16 slices', '32 slices'], linestyles=['dotted', 'dashed', 'solid', 'dashdot'], fontsize = fontsize, xlim = (11.,17.2), ylim=(-1., 0.45), xticklabels = False, yticklabels = False, ylog=False, takeylog=True)
   
    fig.tight_layout()
    plt.savefig(mdir + name, format='pdf')





#### box size and resolution (strong/weak) convergence
def cddfplots2(name='cddf_coldens_o78_LvarNvar_27_test3.x_PtAb_C2Sm_320pixperMpc_6.25slice_zcen-all_300bins_customrange.pdf', fontsize =12):
    '''
    pixel size and slice number convergence plot: 2x2, 
    + ------- + ------- +
    | O7, box | O7, res |
    + ------- + ------- +
    | O8, box | O8, res |
    + ------- + ------- +
    '''

    # load all the data: use rangematch offset averages where slice adding is used
    cddf_base_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o7 = [cddf_base_o7['bins'],cddf_base_o7['logedges']]
    cddf_50_o7 = np.load(pdir + 'cddf_coldens_o7_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_50_o7 = [cddf_50_o7['bins'],cddf_50_o7['logedges']]
    #cddf_50_o7_16sl = np.load(pdir + 'cddf_coldens_o7_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_16-x-3.125slices_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    #cddf_50_o7_16sl = [cddf_50_o7_16sl['bins'],cddf_50_o7_16sl['logedges']]
    cddf_25_o7  = np.load(pdir + 'cddf_coldens_o7_L0025N0376_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25_o7 = [cddf_25_o7['bins'],cddf_25_o7['logedges']]

    binsedges_box_o7 = [cddf_base_o7,cddf_50_o7,cddf_25_o7]

    cddf_25hiREF_o7 = np.load(pdir + 'cddf_coldens_o7_L0025N0752_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25hiREF_o7 = [cddf_25hiREF_o7['bins'],cddf_25hiREF_o7['logedges']]
    cddf_25hiREC_o7 = np.load(pdir + 'cddf_coldens_o7_L0025N0752RECALIBRATED_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25hiREC_o7 = [cddf_25hiREC_o7['bins'],cddf_25hiREC_o7['logedges']]

    binsedges_res_o7 = [cddf_25_o7,cddf_25hiREF_o7,cddf_25hiREC_o7]

    cddf_base_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o8 = [cddf_base_o8['bins'],cddf_base_o8['logedges']]
    cddf_50_o8 = np.load(pdir + 'cddf_coldens_o8_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_50_o8 = [cddf_50_o8['bins'],cddf_50_o8['logedges']]
    #cddf_50_o8_16sl = np.load(pdir + 'cddf_coldens_o8_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_16-x-3.125slices_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    #cddf_50_o8_16sl = [cddf_50_o8_16sl['bins'],cddf_50_o8_16sl['logedges']]
    cddf_25_o8  = np.load(pdir + 'cddf_coldens_o8_L0025N0376_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25_o8 = [cddf_25_o8['bins'],cddf_25_o8['logedges']]

    binsedges_box_o8 = [cddf_base_o8,cddf_50_o8,cddf_25_o8]

    cddf_25hiREF_o8 = np.load(pdir + 'cddf_coldens_o8_L0025N0752_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25hiREF_o8 = [cddf_25hiREF_o8['bins'],cddf_25hiREF_o8['logedges']]
    cddf_25hiREC_o8 = np.load(pdir + 'cddf_coldens_o8_L0025N0752RECALIBRATED_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25hiREC_o8 = [cddf_25hiREC_o8['bins'],cddf_25hiREC_o8['logedges']]

    binsedges_res_o8 = [cddf_25_o8,cddf_25hiREF_o8,cddf_25hiREC_o8]

    ncols = 2
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=nrows,ncols=ncols,sharex=True,sharey=True)  

    cddfsubplot1(ax1, binsedges_box_o7,subtitle = 'O VII', subfigind = '(a)', xlabel=None, ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['red','maroon','salmon'], labels = ['100 cMpc','50 cMpc','25 cMpc'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=(1e-23,1e-9), xticklabels=False)
    cddfsubplot1(ax3, binsedges_box_o8,subtitle = 'O VIII', subfigind = '(c)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['blue','navy','cyan'], labels = ['100 cMpc','50 cMpc','25 cMpc'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=(1e-23,1e-9))
    cddfsubplot1(ax2, binsedges_res_o7,subtitle = 'O VII', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['red','darkred','chocolate'], labels = ['med', 'hi-REF', 'hi-RECAL'], linestyles =['solid','dashed','dotted'], fontsize = fontsize, xlim = (11.,17.), ylim =(1e-23,1e-9), xticklabels = False, yticklabels = False)
    cddfsubplot1(ax4, binsedges_res_o8,subtitle = 'O VIII', subfigind = '(d)', xlabel = r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$' ,ylabel = None, colors = ['blue','darkslateblue','steelblue'], labels = ['med', 'hi-REF', 'hi-RECAL'], linestyles = ['solid','dashed','dotted'], fontsize = fontsize, xlim = (11.,17.), ylim =(1e-23,1e-9), xticklabels = False, yticklabels = False)

    fig.tight_layout()
    plt.savefig(mdir + name, format='pdf', bbox_inches='tight')


#### box size and resolution (strong/weak) convergence: compared to fiducial cddf
def cddfplots2_relative(name='cddf_coldens_o78_LvarNvar_27_test3.x_PtAb_C2Sm_320pixperMpc_6.25slice_zcen-all_300bins_customrange_relative.pdf', fontsize =12):
    '''
    pixel size and slice number convergence plot: 2x2, 
    + ------- + ------- +
    | O7, box | O7, res |
    + ------- + ------- +
    | O8, box | O8, res |
    + ------- + ------- +
    '''

    # load all the data: use rangematch offset averages where slice adding is used

    cddf_base_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o7 = [cddf_base_o7['bins'],cddf_base_o7['logedges']]

    cddf_base_o7_n = [cddf_base_o7[0]/cddf_base_o7[0],cddf_base_o7[1]]
    cddf_50_o7 = np.load(pdir + 'cddf_coldens_o7_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_50_o7 = [cddf_50_o7['bins'],cddf_50_o7['logedges']]
    cddf_50_o7_n = [cddf_50_o7[0]/cddf_base_o7[0],cddf_50_o7[1]]

    #cddf_50_o7_16sl = np.load(pdir + 'cddf_coldens_o7_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_16-x-3.125slices_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    #cddf_50_o7_16sl = [cddf_50_o7_16sl['bins'],cddf_50_o7_16sl['logedges']]
    #cddf_50_o7_16sl_n = [cddf_50_o7_16sl[0]/cddf_base_o7[0],cddf_50_o7_16sl[1]]

    cddf_25_o7  = np.load(pdir + 'cddf_coldens_o7_L0025N0376_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25_o7 = [cddf_25_o7['bins'],cddf_25_o7['logedges']]
    cddf_25_o7_n = [cddf_25_o7[0]/cddf_base_o7[0],cddf_25_o7[1]]

    binsedges_box_o7_n = [cddf_base_o7_n,cddf_50_o7_n,cddf_25_o7_n]


    cddf_25hiREF_o7 = np.load(pdir + 'cddf_coldens_o7_L0025N0752_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25hiREF_o7 = [cddf_25hiREF_o7['bins'],cddf_25hiREF_o7['logedges']]
    cddf_25hiREF_o7_n = [cddf_25hiREF_o7[0]/cddf_25_o7[0],cddf_25hiREF_o7[1]]

    cddf_25hiREC_o7 = np.load(pdir + 'cddf_coldens_o7_L0025N0752RECALIBRATED_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25hiREC_o7 = [cddf_25hiREC_o7['bins'],cddf_25hiREC_o7['logedges']]
    cddf_25hiREC_o7_n = [cddf_25hiREC_o7[0]/cddf_25_o7[0],cddf_25hiREC_o7[1]]

    binsedges_res_o7_n = [[cddf_25_o7_n[0]/cddf_25_o7_n[0],cddf_25_o7_n[1]],cddf_25hiREF_o7_n,cddf_25hiREC_o7_n]


    cddf_base_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o8 = [cddf_base_o8['bins'],cddf_base_o8['logedges']]
    cddf_base_o8_n = [cddf_base_o8[0]/cddf_base_o8[0],cddf_base_o8[1]]

    cddf_50_o8 = np.load(pdir + 'cddf_coldens_o8_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_50_o8 = [cddf_50_o8['bins'],cddf_50_o8['logedges']]
    cddf_50_o8_n = [cddf_50_o8[0]/cddf_base_o8[0],cddf_50_o8[1]]

    #cddf_50_o8_16sl = np.load(pdir + 'cddf_coldens_o8_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_16-x-3.125slices_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    #cddf_50_o8_16sl = [cddf_50_o8_16sl['bins'],cddf_50_o8_16sl['logedges']]
    #cddf_50_o8_16sl_n = [cddf_50_o8_16sl[0]/cddf_base_o8[0],cddf_50_o8_16sl[1]]

    cddf_25_o8  = np.load(pdir + 'cddf_coldens_o8_L0025N0376_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25_o8 = [cddf_25_o8['bins'],cddf_25_o8['logedges']]
    cddf_25_o8_n = [cddf_25_o8[0]/cddf_base_o8[0],cddf_25_o8[1]]

    binsedges_box_o8_n = [cddf_base_o8_n,cddf_50_o8_n,cddf_25_o8_n]


    cddf_25hiREF_o8 = np.load(pdir + 'cddf_coldens_o8_L0025N0752_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25hiREF_o8 = [cddf_25hiREF_o8['bins'],cddf_25hiREF_o8['logedges']]
    cddf_25hiREF_o8_n = [cddf_25hiREF_o8[0]/cddf_25_o8[0],cddf_25hiREF_o8[1]]

    cddf_25hiREC_o8 = np.load(pdir + 'cddf_coldens_o8_L0025N0752RECALIBRATED_27_test3.1_PtAb_C2Sm_8000pix_1.5625slice_zcen-all_z-projection_T4EOS_4-x-1.5625-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_25hiREC_o8 = [cddf_25hiREC_o8['bins'],cddf_25hiREC_o8['logedges']]
    cddf_25hiREC_o8_n = [cddf_25hiREC_o8[0]/cddf_25_o8[0],cddf_25hiREC_o8[1]]

    binsedges_res_o8_n = [[cddf_25_o8_n[0]/cddf_25_o8_n[0],cddf_25_o8_n[1]],cddf_25hiREF_o8_n,cddf_25hiREC_o8_n]


    ncols = 2
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=nrows,ncols=ncols,sharex=True,sharey=True)  

    cddfsubplot1(ax1, binsedges_box_o7_n, subtitle='O VII', subfigind='(a)', subfigindloc=(0.95, 0.05), xlabel=None, ylabel = r'$\log_{10} \, f(N)\, /\, f(N, \mathrm{stnd})$', colors = ['red','maroon','salmon'], labels = ['100 cMpc','50 cMpc','25 cMpc'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=None, xticklabels=False, legendloc='upper left', takeylog=True, ylog=False)
    cddfsubplot1(ax3, binsedges_box_o8_n, subtitle='O VIII', subfigind='(c)', subfigindloc=(0.95, 0.05), xlabel=r'$ \log_{10}\, N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10} \, f(N) \, /\, f(N, \mathrm{stnd})$', colors = ['blue','navy','cyan'], labels = ['100 cMpc','50 cMpc','25 cMpc'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=None, legendloc='upper left', takeylog=True, ylog=False)
    cddfsubplot1(ax2, binsedges_res_o7_n, subtitle='O VII', subfigind='(b)', subfigindloc=(0.95, 0.05), xlabel=None, ylabel = None, colors = ['red','darkred','chocolate'], labels = ['mid-Ref', 'hi-Ref', 'hi-Recal'], linestyles =['solid','dashed','dotted'], fontsize = fontsize, xlim = (11.,17.), ylim=None, xticklabels = False, yticklabels = False, takeylog=True, ylog=False)
    cddfsubplot1(ax4, binsedges_res_o8_n, subtitle='O VIII', subfigind='(d)', subfigindloc=(0.95, 0.05), xlabel = r'$ \log_{10}\, N\; [\mathrm{cm}^{-2}]$' ,ylabel = None, colors = ['blue','darkslateblue','steelblue'], labels = ['mid-Ref', 'hi-Ref', 'hi-Recal'], linestyles = ['solid','dashed','dotted'], fontsize = fontsize, xlim = (11.,17.), ylim =None, xticklabels = False, yticklabels = False, takeylog=True, ylog=False)

    fig.tight_layout()
    plt.savefig(mdir + name, format='pdf')


#### gadget vs. fiducial C2 kernel: compared to fiducial cddf
def cddfplot3(name, fontsize =12):
    '''
    +----+----+
    | O7 | O8 |
    +----+----+
    '''
    # load all the data: use rangematch offset averages where slice adding is used

    cddf_base_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o7 = [cddf_base_o7['bins'],cddf_base_o7['logedges']]
    cddf_gd_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_gadgetSm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_gd_o7 = [cddf_gd_o7['bins'],cddf_gd_o7['logedges']]
    binsedges_o7 = [cddf_base_o7,cddf_gd_o7]

    #cddf_base_o7_n = [cddf_base_o7[0]/cddf_base_o7[0],cddf_base_o7[1]]
   
    cddf_base_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o8 = [cddf_base_o8['bins'],cddf_base_o8['logedges']]
    cddf_gd_o8 =  np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_gadgetSm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_gd_o8 = [cddf_gd_o8['bins'],cddf_gd_o8['logedges']]
    binsedges_o8 = [cddf_base_o8,cddf_gd_o8]

    ncols = 2
    nrows = 1

    # uses gridspec and add_subplot under the hood
    fig, (ax1,ax2) = plt.subplots(nrows=nrows,ncols=ncols,sharex=True,sharey=True,figsize = (5.5,3.))  

    cddfsubplot1(ax1, binsedges_o7,subtitle = 'O VII', subfigind = '(a)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['red','sienna'], labels = ['C2','gadget'], linestyles=['solid','dashed'], fontsize =fontsize, xlim = (11.,17.), ylim=(1e-23,1e-9), xticklabels=False, legendloc = 'lower left')
    cddfsubplot1(ax2, binsedges_o8,subtitle = 'O VIII', subfigind = '(b)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['blue','navy'], labels = ['C2','gadget'], linestyles =['solid','dashed'], fontsize = fontsize, xlim = (11.,17.), ylim =(1e-23,1e-9), xticklabels = False, yticklabels = False, legendloc = 'lower left')
    

    fig.tight_layout()
    plt.savefig(name)


#### gadget vs. fiducial C2 kernel: compared to fiducial cddf
def cddfplot3_relative(name='cddf_coldens_o78_L0100N1504_27_test3.1_PtAb_varSm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins_relative.pdf', fontsize =12):
    '''
    +----+----+
    | O7 | O8 |
    +----+----+
    '''
    # load all the data: use rangematch offset averages where slice adding is used

    o7_base = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_gd =   getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_gadgetSm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o7_base)
    o7_base_n = [o7_base[0]/o7_base[0], o7_base[1]]
    binsedges_o7_n = [o7_base_n,o7_gd]
   
    o8_base = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_gd =   getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_gadgetSm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o8_base)
    o8_base_n = [o8_base[0]/o8_base[0], o8_base[1]]
    binsedges_o8_n = [o8_base_n,o8_gd]

    ncols = 2
    nrows = 1

    # uses gridspec and add_subplot under the hood
    fig, (ax1,ax2) = plt.subplots(nrows=nrows,ncols=ncols,sharex=True,sharey=True,figsize = (5.5,3.))  

    cddfsubplot1(ax1, binsedges_o7_n,subtitle = 'O VII', subfigind = '(a)', xlabel=r'$ \log_{10}\, N_{\mathrm{O\, VII}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}\, f(N)\,/ \, f(N, \mathrm{C2})$', colors = ['red','sienna'], labels = ['C2','gadget'], linestyles=['solid','dashed'], fontsize =fontsize, xlim = (11.,17.), ylim=(-0.11, 0.11), xticklabels=False,legendloc = 'lower left', ylog=False, takeylog=True)
    cddfsubplot1(ax2, binsedges_o8_n,subtitle = 'O VIII', subfigind = '(b)', xlabel=r'$ \log_{10}\, N_{\mathrm{O\, VIII}}\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['blue','navy'], labels = ['C2','gadget'], linestyles =['solid','dashed'], fontsize = fontsize, xlim = (11.,17.), ylim=(-0.11, 0.11), xticklabels = False, yticklabels = False, legendloc = 'lower left', ylog=False, takeylog=True)
    

    fig.tight_layout()
    plt.savefig(mdir + name, format='pdf')


#### REF vs. S15_AGNdT9 C2, 50 and 100 Mpc
def cddfplot4(name, fontsize =12):
    '''
    +----+----+
    | O7 | O8 |
    +----+----+
    '''
    # load all the data: use rangematch offset averages where slice adding is used

    cddf_base_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o7 = [cddf_base_o7['bins'],cddf_base_o7['logedges']]
    cddf_50_o7_o0 = np.load(pdir + 'cddf_coldens_o7_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset0_300-bins_fullrange.npz')
    cddf_50_o7_o0 = [cddf_50_o7_o0['bins'],cddf_50_o7_o0['logedges']]
    cddf_50_o7_o1 = np.load(pdir + 'cddf_coldens_o7_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset1_300-bins_fullrange.npz')
    cddf_50_o7_o1 = [cddf_50_o7_o1['bins'],cddf_50_o7_o1['logedges']]
    cddf_dT9_o7_o0 = np.load(pdir + 'cddf_coldens_o7_L0050N0752S15_AGNdT9_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset0_300-bins_fullrange.npz')
    cddf_dT9_o7_o0 = [cddf_dT9_o7_o0['bins'],cddf_dT9_o7_o0['logedges']]
    cddf_dT9_o7_o1 = np.load(pdir + 'cddf_coldens_o7_L0050N0752S15_AGNdT9_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset1_300-bins_fullrange.npz')
    cddf_dT9_o7_o1 = [cddf_dT9_o7_o1['bins'],cddf_dT9_o7_o1['logedges']]
    binsedges_o7 = [cddf_base_o7,cddf_50_o7_o0,cddf_50_o7_o1,cddf_dT9_o7_o0,cddf_dT9_o7_o1]


   
    cddf_base_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o8 = [cddf_base_o8['bins'],cddf_base_o8['logedges']]
    cddf_50_o8_o0 = np.load(pdir + 'cddf_coldens_o8_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset0_300-bins_fullrange.npz')
    cddf_50_o8_o0 = [cddf_50_o8_o0['bins'],cddf_50_o8_o0['logedges']]
    cddf_50_o8_o1 = np.load(pdir + 'cddf_coldens_o8_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset1_300-bins_fullrange.npz')
    cddf_50_o8_o1 = [cddf_50_o8_o1['bins'],cddf_50_o8_o1['logedges']]
    cddf_dT9_o8_o0 = np.load(pdir + 'cddf_coldens_o8_L0050N0752S15_AGNdT9_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset0_300-bins_fullrange.npz')
    cddf_dT9_o8_o0 = [cddf_dT9_o8_o0['bins'],cddf_dT9_o8_o0['logedges']]
    cddf_dT9_o8_o1 = np.load(pdir + 'cddf_coldens_o8_L0050N0752S15_AGNdT9_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset1_300-bins_fullrange.npz')
    cddf_dT9_o8_o1 = [cddf_dT9_o8_o1['bins'],cddf_dT9_o8_o1['logedges']]
    binsedges_o8 = [cddf_base_o8,cddf_50_o8_o0,cddf_50_o8_o1,cddf_dT9_o8_o0,cddf_dT9_o8_o1]
    ncols = 2
    nrows = 1

    # uses gridspec and add_subplot under the hood
    fig, (ax1,ax2) = plt.subplots(nrows=nrows,ncols=ncols,sharex=True,sharey=True,figsize = (5.5,3.))  

    cddfsubplot1(ax1, binsedges_o7,subtitle = 'O VII', subfigind = '(a)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['red','sienna','sienna','maroon','maroon'], labels = ['REF-100','REF-50',None,'AGNdT9-50',None], linestyles=['solid','dashed','dashed','dotted','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim= (1e-23,1e-9), xticklabels=False, legendloc = 'lower left', subfigindloc = (0.950,0.05))
    cddfsubplot1(ax2, binsedges_o8,subtitle = 'O VIII', subfigind = '(b)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['blue','navy','navy','cyan','cyan'], labels = ['REF-100','REF-50',None,'AGNdT9-50',None], linestyles =['solid','dashed','dashed','dotted','dotted'], fontsize = fontsize, xlim =(11.,17.), ylim = (1e-23,1e-9), xticklabels = False, yticklabels = False, legendloc = 'lower left', subfigindloc = (0.90,0.05))
    # ,

    fig.tight_layout()
    plt.savefig(name)


def cddfplot4_relative(name, fontsize =12): # Ref-L0100, Ref-L0050, AGNdT9-L0050
    '''
    +----+----+
    | O7 | O8 |
    +----+----+
    '''
    # load all the data: use rangematch offset averages where slice adding is used

    cddf_base_o7 = np.load(pdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o7 = [cddf_base_o7['bins'],cddf_base_o7['logedges']]
    cddf_base_o7_n = [cddf_base_o7[0]/cddf_base_o7[0],cddf_base_o7[1]]
    cddf_50_o7 = np.load(pdir + 'cddf_coldens_o7_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_50_o7 = [cddf_50_o7['bins'],cddf_50_o7['logedges']]
    cddf_50_o7_n = [cddf_50_o7[0]/cddf_base_o7[0],cddf_50_o7[1]]    
    cddf_dT9_o7 = np.load(pdir + 'cddf_coldens_o7_L0050N0752S15_AGNdT9_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_dT9_o7 = [cddf_dT9_o7['bins'],cddf_dT9_o7['logedges']]
    cddf_dT9_o7_n = [cddf_dT9_o7[0]/cddf_base_o7[0],cddf_dT9_o7[1]]
    binsedges_o7 = [cddf_base_o7_n,cddf_50_o7_n,cddf_dT9_o7_n]


   
    cddf_base_o8 = np.load(pdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    cddf_base_o8 = [cddf_base_o8['bins'],cddf_base_o8['logedges']]
    cddf_base_o8_n = [cddf_base_o8[0]/cddf_base_o8[0],cddf_base_o8[1]]
    cddf_50_o8 = np.load(pdir + 'cddf_coldens_o8_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_50_o8 = [cddf_50_o8['bins'],cddf_50_o8['logedges']]
    cddf_50_o8_n = [cddf_50_o8[0]/cddf_base_o8[0],cddf_50_o8[1]] 
    cddf_dT9_o8 = np.load(pdir + 'cddf_coldens_o8_L0050N0752S15_AGNdT9_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125-addto-6.250000slices_offset-average_300-bins_rangematch_L0100N1504_32000pix_16-x-6.250000slices.npz')
    cddf_dT9_o8 = [cddf_dT9_o8['bins'],cddf_dT9_o8['logedges']]
    cddf_dT9_o8_n = [cddf_dT9_o8[0]/cddf_base_o8[0],cddf_dT9_o8[1]] 
    binsedges_o8 = [cddf_base_o8_n,cddf_50_o8_n,cddf_dT9_o8_n]

    ncols = 2
    nrows = 1

    # uses gridspec and add_subplot under the hood
    fig, (ax1,ax2) = plt.subplots(nrows=nrows,ncols=ncols,sharex=True,sharey=True,figsize = (5.5,3.))  

    cddfsubplot1(ax1, binsedges_o7,subtitle = 'O VII', subfigind = '(a)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'#sightlines / fiducial', colors = ['red','sienna','maroon'], labels = ['REF-100','REF-50','AGNdT9-50'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim= None, xticklabels=False)
    cddfsubplot1(ax2, binsedges_o8,subtitle = 'O VIII', subfigind = '(b)', xlabel=r'#sightlines / fiducial', ylabel = None, colors = ['blue','navy','cyan',], labels = ['REF-100','REF-50','AGNdT9-50'], linestyles =['solid','dashed','dotted'], fontsize = fontsize, xlim =(11.,17.), ylim = None, xticklabels = False, yticklabels = False)
    # (11.,17.)

    fig.tight_layout()
    plt.savefig(name)


#### x, y, z projections vs. average: absolute and relative
def cddfplot5_absrel(name, fontsize =12):
    '''
    pixel size and slice number convergence plot: 2x2, 
    + ------- + ------- +
    | O7, abs | O8, abs |
    + ------- + ------- +
    | O7, rel | O8, rel |
    + ------- + ------- +
    '''
    # load all the data: use rangematch offset averages where slice adding is used

    cddf_xf_o7 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x-all_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_300-bins_fullrange.npz')
    cddf_yf_o7 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y-all_pm6.250000y-projectionT4SFR_300-bins_fullrange.npz')
    cddf_zf_o7 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')

    cddf_xyz_o7 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-all_xyz-projections_T4EOS_16-x-6.250000slices_projection-axis-average_300-bins_rangematch_xyz-projection-maxrange.npz')
    cddf_xyz_o7_n = [cddf_xyz_o7[0]/cddf_xyz_o7[0],cddf_xyz_o7[1]]
    cddf_xm_o7_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x-all_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_300-bins_rangematch_xyz-projection-maxrange.npz', norm = cddf_xyz_o7)
    cddf_ym_o7_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y-all_pm6.250000y-projectionT4SFR_300-bins_rangematch_xyz-projection-maxrange.npz', norm = cddf_xyz_o7)
    cddf_zm_o7_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_300-bins_rangematch_xyz-projection-maxrange.npz', norm = cddf_xyz_o7)
    
    binsedges_o7_abs = [cddf_xyz_o7,cddf_xf_o7,cddf_yf_o7,cddf_zf_o7]
    binsedges_o7_rel = [cddf_xyz_o7_n,cddf_xm_o7_n,cddf_ym_o7_n,cddf_zm_o7_n]

   
    cddf_xf_o8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x-all_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_300-bins_fullrange.npz')
    cddf_yf_o8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y-all_pm6.250000y-projectionT4SFR_300-bins_fullrange.npz')
    cddf_zf_o8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')

    cddf_xyz_o8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-all_xyz-projections_T4EOS_16-x-6.250000slices_projection-axis-average_300-bins_rangematch_xyz-projection-maxrange.npz')
    cddf_xyz_o8_n = [cddf_xyz_o8[0]/cddf_xyz_o8[0],cddf_xyz_o8[1]]
    cddf_xm_o8_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x-all_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_300-bins_rangematch_xyz-projection-maxrange.npz', norm = cddf_xyz_o8)
    cddf_ym_o8_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y-all_pm6.250000y-projectionT4SFR_300-bins_rangematch_xyz-projection-maxrange.npz', norm = cddf_xyz_o8)
    cddf_zm_o8_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_300-bins_rangematch_xyz-projection-maxrange.npz', norm = cddf_xyz_o8)
    
    binsedges_o8_abs = [cddf_xyz_o8,cddf_xf_o8,cddf_yf_o8,cddf_zf_o8]
    binsedges_o8_rel = [cddf_xyz_o8_n,cddf_xm_o8_n,cddf_ym_o8_n,cddf_zm_o8_n]

    ncols = 2
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(nrows=nrows,ncols=ncols,sharex=True,sharey='row')  

    cddfsubplot1(ax1, binsedges_o7_abs,subtitle = 'O VII', subfigind = '(a)', xlabel=None, ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['brown','lightcoral','maroon','red'], labels = ['average','x','y','z'], linestyles=['solid','dashed','dotted','dashdot'], fontsize =fontsize, xlim =(11.,17.), ylim= (1e-23,1e-9), xticklabels=False)
    cddfsubplot1(ax2, binsedges_o8_abs,subtitle = 'O VIII', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['slategray','navy','cyan','blue'], labels = ['average','x','y','z'], linestyles =['solid','dashed','dotted','dashdot'], fontsize = fontsize, xlim =(11.,17.), ylim = (1e-23,1e-9), xticklabels = False, yticklabels = False)
    cddfsubplot1(ax3, binsedges_o7_rel,subtitle = 'O VII', subfigind = '(c)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'#sightlines / fiducial', colors = ['brown','lightcoral','maroon','red'], labels = None, linestyles=['solid','dashed','dotted','dashdot'], fontsize =fontsize, xlim =(11.,17.), ylim= (0.7,1.3), xticklabels=True,ylog=False)
    cddfsubplot1(ax4, binsedges_o8_rel,subtitle = 'O VIII', subfigind = '(d)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['slategray','navy','cyan','blue'], labels = None, linestyles =['solid','dashed','dotted','dashdot'], fontsize = fontsize, xlim =(11.,17.), ylim = (0.7,1.3), xticklabels = True, yticklabels = False, ylog=False)
    # (11.,17.), (1e-23,1e-9), , legendloc = 'lower left', subfigindloc = (0.950,0.05)

    fig.tight_layout()
    plt.savefig(name)



#### box eighths with random projection axis compared to xyz-whole box average
def cddfplot6_absrel(name, fontsize =12):
    '''
    cosmic variance errors/deviations plot: 2x2, 
    + ------- + ------- +
    | O7, abs | O8, abs |
    + ------- + ------- +
    | O7, rel | O8, rel |
    + ------- + ------- +
    '''
    # load all the data: use rangematch offset averages where slice adding is used

    o7_1 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x3.125-46.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x0of2-yh0of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o7_2 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x3.125-46.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x0of2-yh1of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o7_3 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y3.125-46.875000_pm6.250000y-projectionT4SFR_x0of2-yh0of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o7_4 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y53.125-96.875000_pm6.250000y-projectionT4SFR_x0of2-yh1of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o7_5 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x53.125-96.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x1of2-yh0of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o7_6 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x53.125-96.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x1of2-yh0of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o7_7 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen3.125-46.875_T4SFR_x1of2-yh1of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o7_8 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen53.125-96.875_T4SFR_x1of2-yh1of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
 
    o7_av = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-all_xyz-projections_T4EOS_16-x-6.250000slices_projection-axis-average_300-bins_rangematch_xyz-projection-maxrange.npz')
    o7_av_n = [o7_av[0]/o7_av[0],o7_av[1]]
    o7_1_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x3.125-46.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x0of2-yh0of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz',norm = o7_av)
    o7_2_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x3.125-46.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x0of2-yh1of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz',norm = o7_av)
    o7_3_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y3.125-46.875000_pm6.250000y-projectionT4SFR_x0of2-yh0of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz',norm = o7_av)
    o7_4_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y53.125-96.875000_pm6.250000y-projectionT4SFR_x0of2-yh1of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz',norm = o7_av)
    o7_5_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x53.125-96.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x1of2-yh0of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz',norm = o7_av)
    o7_6_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x53.125-96.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x1of2-yh0of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz',norm = o7_av)
    o7_7_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen3.125-46.875_T4SFR_x1of2-yh1of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz',norm = o7_av)
    o7_8_n = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen53.125-96.875_T4SFR_x1of2-yh1of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz',norm = o7_av)
    
    binsedges_o7_abs = [o7_av,o7_1,o7_2,o7_3,o7_4,o7_5,o7_6,o7_7,o7_8]
    binsedges_o7_rel = [o7_av_n,o7_1_n,o7_2_n,o7_3_n,o7_4_n,o7_5_n,o7_6_n,o7_7_n,o7_8_n]

   
    o8_1 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y3.125-46.875000_pm6.250000y-projectionT4SFR_x0of2-yh0of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o8_2 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y3.125-46.875000_pm6.250000y-projectionT4SFR_x0of2-yh0of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o8_3 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y3.125-46.875000_pm6.250000y-projectionT4SFR_x1of2-yh0of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o8_4 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y53.125-96.875000_pm6.250000y-projectionT4SFR_x1of2-yh1of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o8_5 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x53.125-96.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x1of2-yh0of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o8_6 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x53.125-96.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x1of2-yh1of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o8_7 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen3.125-46.875_T4SFR_x0of2-yh1of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')
    o8_8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen53.125-96.875_T4SFR_x0of2-yh1of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz')

    o8_av = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-all_xyz-projections_T4EOS_16-x-6.250000slices_projection-axis-average_300-bins_rangematch_xyz-projection-maxrange.npz')
    o8_av_n = [o8_av[0]/o8_av[0],o8_av[1]]
    o8_1_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y3.125-46.875000_pm6.250000y-projectionT4SFR_x0of2-yh0of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz', norm = o8_av)
    o8_2_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y3.125-46.875000_pm6.250000y-projectionT4SFR_x0of2-yh0of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz', norm = o8_av)
    o8_3_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y3.125-46.875000_pm6.250000y-projectionT4SFR_x1of2-yh0of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz', norm = o8_av)
    o8_4_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x50.000000_pm100.000000_y53.125-96.875000_pm6.250000y-projectionT4SFR_x1of2-yh1of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz', norm = o8_av)
    o8_5_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x53.125-96.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x1of2-yh0of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz', norm = o8_av)
    o8_6_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_100.000000slice_x53.125-96.875000_pm6.250000_y50.000000_pm100.000000x-projectionT4SFR_x1of2-yh1of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz', norm = o8_av)
    o8_7_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen3.125-46.875_T4SFR_x0of2-yh1of2-zh0of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz', norm = o8_av)
    o8_8_n = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen53.125-96.875_T4SFR_x0of2-yh1of2-zh1of2_8-x-6.250000slices_300-bins_rangematch_xyz-proj-av_randomaxis8ths-set2.npz', norm = o8_av)
    
    
    binsedges_o8_abs = [o8_av,o8_1,o8_2,o8_3,o8_4,o8_5,o8_6,o8_7,o8_8]
    binsedges_o8_rel = [o8_av_n,o8_1_n,o8_2_n,o8_3_n,o8_4_n,o8_5_n,o8_6_n,o8_7_n,o8_8_n]

    ncols = 2
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(nrows=nrows,ncols=ncols,sharex=True,sharey='row')  

    cddfsubplot1(ax1, binsedges_o7_abs,subtitle = 'O VII', subfigind = '(a)', xlabel=None, ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['red','lightcoral','maroon','rosybrown','magenta','brown','mediumvioletred','orangered','lightsalmon'], labels = ['average','eighth',None,None,None,None,None,None,None], linestyles=['solid','dashed','dashed','dashed','dashed','dashed','dashed','dashed','dashed'], fontsize =fontsize, xlim =(11.,17.), ylim=(1e-23,1e-9), xticklabels=False)
    cddfsubplot1(ax2, binsedges_o8_abs,subtitle = 'O VIII', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['blue','navy','cyan','slategray','darkslateblue','dodgerblue','steelblue','mediumslateblue','teal'], labels = ['average','eighth',None,None,None,None,None,None,None], linestyles =['solid','dashed','dashed','dashed','dashed','dashed','dashed','dashed','dashed'], fontsize = fontsize, xlim =None, ylim = None, xticklabels = False, yticklabels = False)
    cddfsubplot1(ax3, binsedges_o7_rel,subtitle = 'O VII', subfigind = '(c)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'#sightlines / fiducial', colors = ['red','lightcoral','maroon','rosybrown','magenta','brown','mediumvioletred','orangered','lightsalmon'], labels = None, linestyles=['solid','dashed','dashed','dashed','dashed','dashed','dashed','dashed','dashed'], fontsize =fontsize, xlim =None, ylim= None, xticklabels=True,ylog=True)
    cddfsubplot1(ax4, binsedges_o8_rel,subtitle = 'O VIII', subfigind = '(d)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['blue','navy','cyan','slategray','darkslateblue','dodgerblue','steelblue','mediumslateblue','teal'], labels = None, linestyles =['solid','dashed','dashed','dashed','dashed','dashed','dashed','dashed','dashed'], fontsize = fontsize, xlim =None, ylim = None, xticklabels = True, yticklabels = False, ylog=True)
    # (11.,17.), (1e-23,1e-9), , legendloc = 'lower left', subfigindloc = (0.950,0.05)

    fig.tight_layout()
    plt.savefig(name)


# x: 75-85, y: 0-10 subregion zoom: slice number and pixel size convergence for O and H total (wiEOS)
def cddfplots7(name, fontsize =14):
    '''
    subregion O and H pixel size and slice number convergence plot: 2x2, 
    + ------ + ----- +
    | O, pix | O, sl |
    + ------ + ----- +
    | H, pix | H, sl |
    + ------ + ----- +
    '''

    # load all the data
    o_base = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o_16 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    o_4 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    o_8 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_sl_o = [o_base,o_16,o_8,o_4]

    h_base = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    h_16 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    h_8 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    h_4 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_sl_h = [h_base,h_16,h_8,h_4]

    o_xi3 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o_xi9 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_pix_o = [o_base,o_xi3,o_xi9]

    h_xi3 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    h_xi9 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_pix_h = [h_base,h_xi3,h_xi9]


    ncols = 2
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=nrows,ncols=ncols,sharex='row',sharey='row')  

    cddfsubplot1(ax1, binsedges_pix_o,subtitle = 'O', subfigind = '(a)', xlabel=None, ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['green','lawngreen','darkolivegreen'] , labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,20.5), ylim=(1e-28,1e-10), xticklabels=False)
    cddfsubplot1(ax3, binsedges_pix_h,subtitle = 'H', subfigind = '(c)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['red','sienna','maroon'], labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = None, ylim=None)
    cddfsubplot1(ax2, binsedges_sl_o,subtitle = 'O', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['green','mediumseagreen','springgreen','olivedrab'], labels = ['32 slices','16 slices','8 slices', '4 slices'], linestyles =['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False)
    cddfsubplot1(ax4, binsedges_sl_h,subtitle = 'H', subfigind = '(d)', xlabel = r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$' ,ylabel = None, colors = ['red','darkred','chocolate','lightcoral'], labels = ['32 slices','16 slices','8 slices', '4 slices'], linestyles = ['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False)

    fig.tight_layout()
    plt.savefig(name)


# x: 75-85, y: 0-10 subregion zoom: slice number and pixel size convergence for O and H total (wiEOS)
def cddfplots7_relative(name, fontsize =14):
    '''
    subregion O and H pixel size and slice number convergence plot: 2x2, 
    + ------ + ----- +
    | O, pix | O, sl |
    + ------ + ----- +
    | H, pix | H, sl |
    + ------ + ----- +
    '''

    # load all the data
    o_base = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o_base_n = [o_base[0]/o_base[0],o_base[1]]
    o_16 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=o_base)
    o_4 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=o_base)
    o_8 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=o_base)
    binsedges_sl_o = [o_base_n,o_16,o_8,o_4]

    h_base = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    h_base_n = [h_base[0]/h_base[0],h_base[1]]
    h_16 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=h_base)
    h_8 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=h_base)
    h_4 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=h_base)
    binsedges_sl_h = [h_base_n,h_16,h_8,h_4]

    o_xi3 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=o_base)
    o_xi9 = getcddf('cddf_coldens_oxygen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=o_base)
    binsedges_pix_o = [o_base_n,o_xi3,o_xi9]

    h_xi3 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=h_base)
    h_xi9 = getcddf('cddf_coldens_hydrogen_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_wiEOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=h_base)
    binsedges_pix_h = [h_base_n,h_xi3,h_xi9]


    ncols = 2
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=nrows,ncols=ncols,sharex='row',sharey='row')  

    cddfsubplot1(ax1, binsedges_pix_o,subtitle = 'O', subfigind = '(a)', xlabel=None, ylabel = r'#sightlines / fiducial', colors = ['green','lawngreen','darkolivegreen'] , labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,20.5), ylim=None, xticklabels=False)
    cddfsubplot1(ax3, binsedges_pix_h,subtitle = 'H', subfigind = '(c)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'#sightlines / fiducial', colors = ['red','sienna','maroon'], labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = None, ylim=None)
    cddfsubplot1(ax2, binsedges_sl_o,subtitle = 'O', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['green','mediumseagreen','springgreen','olivedrab'], labels = ['32 slices','16 slices','8 slices', '4 slices'], linestyles =['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False)
    cddfsubplot1(ax4, binsedges_sl_h,subtitle = 'H', subfigind = '(d)', xlabel = r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$' ,ylabel = None, colors = ['red','darkred','chocolate','lightcoral'], labels = ['32 slices','16 slices','8 slices', '4 slices'], linestyles = ['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False)

    fig.tight_layout()
    plt.savefig(name)



# x: 75-85, y: 0-10 subregion zoom: slice number and pixel size convergence for O7, O8 and H1 nossh
def cddfplots8(name, fontsize =14):
    '''
    subregion O7, O8 and H1 pixel size and slice number convergence plot: 2x3, 
    + ------- + ------ +
    | O7, pix | O7, sl |
    + ------- + ------ +
    | O8, pix | O8, sl |
    + ------- + ------ +
    | H1, pix | H1, sl |
    + ------- + ------ +
    '''

    # load all the data
    o7_base = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    o7_32 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o7_4 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    o7_8 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_sl_o7 = [o7_base,o7_32,o7_8,o7_4]

    o8_base = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    o8_32 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o8_4 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    o8_8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_sl_o8 = [o8_base,o8_32,o8_8,o8_4]
    
    h1_base = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    h1_32 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    h1_4 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    h1_8 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_sl_h1 = [h1_base,h1_32,h1_8,h1_4]


    o7_xi3 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o7_xi9 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_pix_o7 = [o7_32,o7_xi3,o7_xi9]

    o8_xi3 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o8_xi9 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_pix_o8 = [o8_32,o8_xi3,o8_xi9]

    h1_xi3 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    h1_xi9 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    binsedges_pix_h1 = [h1_32,h1_xi3,h1_xi9]


    ncols = 2
    nrows = 3

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3, ax4), (ax5,ax6)) = plt.subplots(nrows=nrows,ncols=ncols,sharex='row',sharey='row')  

    cddfsubplot1(ax1, binsedges_pix_o7,subtitle = 'O VII', subfigind = '(a)', xlabel=None, ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['green','lawngreen','darkolivegreen'] , labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,18.5), ylim=(1e-28,1e-10), xticklabels=False)
    cddfsubplot1(ax3, binsedges_pix_o8,subtitle = 'O VIII', subfigind = '(c)', xlabel=None, ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['green','lawngreen','darkolivegreen'] , labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,17.5), ylim=(1e-28,1e-10), xticklabels=False)    
    cddfsubplot1(ax5, binsedges_pix_h1,subtitle = 'H I', subfigind = '(e)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['red','sienna','maroon'], labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,23.), ylim=None)

    cddfsubplot1(ax2, binsedges_sl_o7,subtitle = 'O VII', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['green','mediumseagreen','springgreen','olivedrab'], labels = ['16 slices','32 slices','8 slices', '4 slices'], linestyles =['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False)
    cddfsubplot1(ax4, binsedges_sl_o8,subtitle = 'O VIII', subfigind = '(d)', xlabel=None, ylabel = None, colors = ['green','mediumseagreen','springgreen','olivedrab'], labels = ['16 slices','32 slices','8 slices', '4 slices'], linestyles =['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False)
    cddfsubplot1(ax6, binsedges_sl_h1,subtitle = 'H I', subfigind = '(f)', xlabel = r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$' ,ylabel = None, colors = ['red','darkred','chocolate','lightcoral'], labels = ['16 slices','32 slices','8 slices', '4 slices'], linestyles = ['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False)

    fig.tight_layout()
    plt.savefig(name)


# x: 75-85, y: 0-10 subregion zoom: slice number and pixel size convergence for O7, O8 and H1 nossh
def cddfplots8_relative(name, fontsize =14):
    '''
    subregion O7, O8 and H1 pixel size and slice number convergence plot: 2x3, 
    + ------- + ------ +
    | O7, pix | O7, sl |
    + ------- + ------ +
    | O8, pix | O8, sl |
    + ------- + ------ +
    | H1, pix | H1, sl |
    + ------- + ------ +
    '''

    # load all the data

    o7_slbase = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o7_slbase_n = [o7_slbase[0]/o7_slbase[0],o7_slbase[1]]
    o7_16 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=o7_slbase)
    o7_4 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=o7_slbase)
    o7_8 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=o7_slbase)
    binsedges_sl_o7 = [o7_slbase_n,o7_16,o7_8,o7_4]

    o8_slbase = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o8_slbase_n = [o8_slbase[0]/o8_slbase[0],o8_slbase[1]]
    o8_16 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=o8_slbase)
    o8_4 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=o8_slbase)
    o8_8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=o8_slbase)
    binsedges_sl_o8 = [o8_slbase_n,o8_16,o8_8,o8_4]

    h1_slbase = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    h1_slbase_n = [h1_slbase[0]/h1_slbase[0],h1_slbase[1]]
    h1_16 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_16-x-3.125-addto-6.25slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=h1_slbase)
    h1_4 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_4-x-3.125-addto-25.0slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=h1_slbase)
    h1_8 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_8-x-3.125-addto-12.5slices_offset-average_300-bins_rangematch_denspeakszoom-max.npz',norm=h1_slbase)
    binsedges_sl_h1 = [h1_slbase_n,h1_16,h1_8,h1_4]

    o7_pixbase = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o7_pixbase_n = [o7_pixbase[0]/o7_pixbase[0],o7_pixbase[1]]
    o7_xi3 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=o7_pixbase)
    o7_xi9 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=o7_pixbase)
    binsedges_pix_o7 = [o7_pixbase_n,o7_xi3,o7_xi9]

    o8_pixbase = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    o8_pixbase_n = [o8_pixbase[0]/o8_pixbase[0],o8_pixbase[1]]
    o8_xi3 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=o8_pixbase)
    o8_xi9 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=o8_pixbase)
    binsedges_pix_o8 = [o8_pixbase_n,o8_xi3,o8_xi9]

    h1_pixbase = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz')
    h1_pixbase_n = [h1_pixbase[0]/h1_pixbase[0],h1_pixbase[1]]
    h1_xi3 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-9600_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=h1_pixbase)
    h1_xi9 = getcddf('cddf_coldens_h1_L0100N1504_27_test3.1_PtAb_C2Sm_28800pix-redto-3200_3.125slice_zcen-all_x80.0-pm10.0_y5.0-pm10.0_z-projection_T4EOS_32-x-3.125slices_300-bins_rangematch_denspeakszoom-max.npz',norm=h1_pixbase)
    binsedges_pix_h1 = [h1_pixbase_n,h1_xi3,h1_xi9]



    ncols = 2
    nrows = 3

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6)) = plt.subplots(nrows=nrows,ncols=ncols,sharex='row',sharey='row')  

    cddfsubplot1(ax1, binsedges_pix_o7,subtitle = 'O VII', subfigind = '(a)', xlabel=None, ylabel = r'#sightlines / fiducial', colors = ['green','lawngreen','darkolivegreen'] , labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,18.5), ylim=(0.2,3.), xticklabels=False, legendloc=3)
    cddfsubplot1(ax3, binsedges_pix_o8,subtitle = 'O VIII', subfigind = '(c)', xlabel=None, ylabel = r'#sightlines / fiducial', colors = ['green','lawngreen','darkolivegreen'] , labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,17.5), ylim=(0.2,3.), xticklabels=False, legendloc=3)
    cddfsubplot1(ax5, binsedges_pix_h1,subtitle = 'H I', subfigind = '(e)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'#sightlines / fiducial', colors = ['red','sienna','maroon'], labels = ['288k pix','96k pix','32k pix'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,23.), ylim=(0.2,3.), legendloc=3)

    cddfsubplot1(ax2, binsedges_sl_o7,subtitle = 'O VII', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['green','mediumseagreen','springgreen','olivedrab'], labels = ['32 slices','16 slices','8 slices', '4 slices'], linestyles =['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False, legendloc=3)
    cddfsubplot1(ax4, binsedges_sl_o8,subtitle = 'O VIII', subfigind = '(d)', xlabel=None, ylabel = None, colors = ['green','mediumseagreen','springgreen','olivedrab'], labels = ['32 slices','16 slices','8 slices', '4 slices'], linestyles =['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False, legendloc=3)
    cddfsubplot1(ax6, binsedges_sl_h1,subtitle = 'H I', subfigind = '(f)', xlabel = r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$' ,ylabel = None, colors = ['red','darkred','chocolate','lightcoral'], labels = ['32 slices','16 slices','8 slices', '4 slices'], linestyles = ['solid','dashed','dashdot','dotted'], fontsize = fontsize, xlim = None, ylim =None, xticklabels = True, yticklabels = False, legendloc=3)

    fig.tight_layout()
    plt.savefig(name)



def cddfplots9(name, fontsize =12):
    '''
    O7, O8 noAGN vs. REF comparison 
    + -- + ------------ +
    | O7 | O7, 0.1solar |
    + -- + ------------ +
    | O8 | O8, 0.1solar |
    + -- + ------------ +
    saved as cddf_coldens_o7-o8_L0050N0752REF-NOAGN-L0100N1504_27_test3.1_PtAb-0.1solarAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-6.25slices.png
    '''

    # load all the data
    o7_base = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_noagn50 = getcddf('cddf_coldens_o7_L0050N0752REF_NOAGN_27_test3.1_PtAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_ref50 = getcddf('cddf_coldens_o7_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz')
    binsedges_o7 = [o7_base,o7_noagn50,o7_ref50]

    o7_base_fixz = getcddf('cddf_coldens_o7_L0100N1504_27_test3_0.1solarAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_noagn50_fixz = getcddf('cddf_coldens_o7_L0050N0752REF_NOAGN_27_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_ref50_fixz = getcddf('cddf_coldens_o7_L0050N0752_27_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    binsedges_o7_fixz = [o7_base_fixz,o7_noagn50_fixz,o7_ref50_fixz]

    o8_base = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_noagn50 = getcddf('cddf_coldens_o8_L0050N0752REF_NOAGN_27_test3.1_PtAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_ref50 = getcddf('cddf_coldens_o8_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz')
    binsedges_o8 = [o8_base,o8_noagn50,o8_ref50]

    o8_base_fixz = getcddf('cddf_coldens_o8_L0100N1504_27_test3_0.1solarAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_noagn50_fixz = getcddf('cddf_coldens_o8_L0050N0752REF_NOAGN_27_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_ref50_fixz = getcddf('cddf_coldens_o8_L0050N0752_27_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    binsedges_o8_fixz = [o8_base_fixz,o8_noagn50_fixz,o8_ref50_fixz]
    
    ncols = 2
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3,ax4)) = plt.subplots(nrows=nrows,ncols=ncols,sharex='col',sharey='row')  

    cddfsubplot1(ax1, binsedges_o7, subtitle = 'O VII', subfigind = '(a)', xlabel=None, ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['red','sienna','maroon'] , labels = ['REF-100','NOAGN-50','REF-50'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,17.5), ylim=(1e-23,1e-10))
    cddfsubplot1(ax3, binsedges_o8, subtitle = 'O VIII', subfigind = '(c)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['blue','navy','cyan'] , labels = ['REF-100','NOAGN-50','REF-50'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,17.5), ylim=(1e-23,1e-10))    

    cddfsubplot1(ax2, binsedges_o7_fixz, subtitle = r'O VII, $0.1Z_\odot$', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['red','sienna','maroon'] , labels = ['REF-100','NOAGN-50','REF-50'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (11.,16.5), ylim=(1e-23,1e-10))
    cddfsubplot1(ax4, binsedges_o8_fixz, subtitle = r'O VIII, $0.1Z_\odot$', subfigind = '(d)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['blue','navy','cyan'] , labels = ['REF-100','NOAGN-50','REF-50'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (11.,16.5), ylim=(1e-23,1e-10))
    

    fig.tight_layout()
    plt.savefig(name)


def cddfplots9_relative(name, fontsize =12):
    '''
    O7, O8 noAGN vs. REF comparison 
    + -- + ------------ +
    | O7 | O7, 0.1solar |
    + -- + ------------ +
    | O8 | O8, 0.1solar |
    + -- + ------------ +
    saved as cddf_coldens_o7-o8_L0050N0752REF-NOAGN-L0100N1504_27_test3.1_PtAb-0.1solarAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-6.25slices_relative.png
    '''

    # load all the data
    o7_base = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_base_n = [o7_base[0]/o7_base[0],o7_base[1]]
    o7_noagn50 = getcddf('cddf_coldens_o7_L0050N0752REF_NOAGN_27_test3.1_PtAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o7_base)
    o7_ref50 = getcddf('cddf_coldens_o7_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz',norm=o7_base)
    binsedges_o7 = [o7_base_n,o7_noagn50,o7_ref50]

    o7_base_fixz = getcddf('cddf_coldens_o7_L0100N1504_27_test3_0.1solarAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_base_fixz_n = [o7_base_fixz[0]/o7_base_fixz[0],o7_base_fixz[1]]
    o7_noagn50_fixz = getcddf('cddf_coldens_o7_L0050N0752REF_NOAGN_27_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o7_base_fixz)
    o7_ref50_fixz = getcddf('cddf_coldens_o7_L0050N0752_27_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o7_base_fixz)
    binsedges_o7_fixz = [o7_base_fixz_n,o7_noagn50_fixz,o7_ref50_fixz]

    o8_base = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_base_n = [o8_base[0]/o8_base[0],o8_base[1]]
    o8_noagn50 = getcddf('cddf_coldens_o8_L0050N0752REF_NOAGN_27_test3.1_PtAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o8_base)
    o8_ref50 = getcddf('cddf_coldens_o8_L0050N0752_27_test3.1_PtAb_C2Sm_16000pix_3.125slice_zcen-all_z-projection_T4EOS_8-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz',norm=o8_base)
    binsedges_o8 = [o8_base_n,o8_noagn50,o8_ref50]

    o8_base_fixz = getcddf('cddf_coldens_o8_L0100N1504_27_test3_0.1solarAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_base_fixz_n = [o8_base_fixz[0]/o8_base_fixz[0],o8_base_fixz[1]]
    o8_noagn50_fixz = getcddf('cddf_coldens_o8_L0050N0752REF_NOAGN_27_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o8_base_fixz)
    o8_ref50_fixz = getcddf('cddf_coldens_o8_L0050N0752_27_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o8_base_fixz)
    binsedges_o8_fixz = [o8_base_fixz_n,o8_noagn50_fixz,o8_ref50_fixz]
    
    ncols = 2
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig, ((ax1, ax2), (ax3,ax4)) = plt.subplots(nrows=nrows,ncols=ncols,sharex='col',sharey='row')  

    cddfsubplot1(ax1, binsedges_o7, subtitle = 'O VII', subfigind = '(a)', xlabel=None, ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['red','sienna','maroon'] , labels = ['REF-100','NOAGN-50','REF-50'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,17.5), ylim=None,legendloc=6)
    cddfsubplot1(ax3, binsedges_o8, subtitle = 'O VIII', subfigind = '(c)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['blue','navy','cyan'] , labels = ['REF-100','NOAGN-50','REF-50'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (12.,17.5), ylim=None,legendloc=6)    

    cddfsubplot1(ax2, binsedges_o7_fixz, subtitle = r'O VII, $0.1Z_\odot$', subfigind = '(b)', xlabel=None, ylabel = None, colors = ['red','sienna','maroon'] , labels = ['REF-100','NOAGN-50','REF-50'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (11.,16.5), ylim=None,legendloc=6)
    cddfsubplot1(ax4, binsedges_o8_fixz, subtitle = r'O VIII, $0.1Z_\odot$', subfigind = '(d)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['blue','navy','cyan'] , labels = ['REF-100','NOAGN-50','REF-50'], linestyles=['solid','dashed','dotted'], fontsize =fontsize, xlim = (11.,16.5), ylim=None,legendloc=6)
    

    fig.tight_layout()
    plt.savefig(name)


def cddfplots10(name, fontsize =12):
    '''
    O7, O8 z-evolution 1.0-0.0
    + -- + -- +
    | O7 | O8 |
    + -- + -- +

    saved as cddf_coldens_o7-o8_L0100N1504_28-27-25-23-19_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices.png
    '''

    # load all the data
    o7_28 = getcddf('cddf_coldens_o7_L0100N1504_28_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_27 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_25 = getcddf('cddf_coldens_o7_L0100N1504_25_test3.1_PtAb_C2Sm_32000pix_3.125slice_zcen-all_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz')
    o7_23 = getcddf('cddf_coldens_o7_L0100N1504_23_test3.11_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_19 = getcddf('cddf_coldens_o7_L0100N1504_19_test3.11_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    binsedges_o7 = [o7_28,o7_27,o7_25,o7_23,o7_19]


    o8_28 = getcddf('cddf_coldens_o8_L0100N1504_28_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_27 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_23 = getcddf('cddf_coldens_o8_L0100N1504_23_test3.11_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_19 = getcddf('cddf_coldens_o8_L0100N1504_19_test3.11_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    binsedges_o8 = [o8_28, o8_27, o8_23, o8_19]
    
    ncols = 2
    nrows = 1

    # uses gridspec and add_subplot under the hood
    fig, (ax1, ax2) = plt.subplots(nrows=nrows,ncols=ncols,sharex='col',sharey='row',figsize = (5.5,3.))  

    cddfsubplot1(ax1, binsedges_o7, subtitle = 'O VII', subfigind = '(a)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'$\partial^2 n/ \partial N \partial X  $', colors = ['maroon','sienna','indianred','red', 'lightsalmon' ] , labels = [r'$z=0.00$',r'$z=0.10$',r'$z=0.27$',r'$z=0.50$',r'$z=1.00$'], linestyles=['solid','dashed','dashdot','dashdotdot','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=(1e-23,1e-10))

    cddfsubplot1(ax2, binsedges_o8, subtitle = r'O VIII', subfigind = '(b)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['midnightblue','blue','dodgerblue','cyan',] , labels =  [r'$z=0.00$',r'$z=0.10$',r'$z=0.50$',r'$z=1.00$'], linestyles=['solid','dashed', 'dashdot','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=(1e-23,1e-10))
    

    fig.tight_layout()
    plt.savefig(name)

def cddfplots10_relative(name, fontsize =12):
    '''
    O7, O8 z-evolution 1.0-0.0, relative to z=0.0
    + -- + -- +
    | O7 | O8 |
    + -- + -- +

    saved as cddf_coldens_o7-o8_L0100N1504_28-27-25-23-19_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_relative.png
    '''

    # load all the data
    o7_28 = getcddf('cddf_coldens_o7_L0100N1504_28_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_28_n = [o7_28[0]/o7_28[0],o7_28[1]]
    o7_27 = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o7_28)
    o7_25 = getcddf('cddf_coldens_o7_L0100N1504_25_test3.1_PtAb_C2Sm_32000pix_3.125slice_zcen-all_z-projection_T4EOS_16-x-3.125000-addto-6.250000slices_offset0_range-25.0-28.0_1060bins.npz',norm=o7_28)
    o7_23 = getcddf('cddf_coldens_o7_L0100N1504_23_test3.11_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o7_28)
    o7_19 = getcddf('cddf_coldens_o7_L0100N1504_19_test3.11_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o7_28)
    binsedges_o7 = [o7_28_n,o7_27,o7_25,o7_23,o7_19]


    o8_28 = getcddf('cddf_coldens_o8_L0100N1504_28_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_28_n = [o8_28[0]/o8_28[0],o8_28[1]]
    o8_27 = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o8_28)
    o8_23 = getcddf('cddf_coldens_o8_L0100N1504_23_test3.11_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o8_28)
    o8_19 = getcddf('cddf_coldens_o8_L0100N1504_19_test3.11_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz',norm=o8_28)
    binsedges_o8 = [o8_28_n, o8_27, o8_23, o8_19]
    
    ncols = 2
    nrows = 1

    # uses gridspec and add_subplot under the hood
    fig, (ax1, ax2) = plt.subplots(nrows=nrows,ncols=ncols,sharex='col',sharey='row',figsize = (5.5,3.))  

    cddfsubplot1(ax1, binsedges_o7, subtitle = 'O VII', subfigind = '(a)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = r'#sightlines / fiducial', colors = ['maroon','sienna','indianred','red', 'lightsalmon' ] , labels = [r'$z=0.00$',r'$z=0.10$',r'$z=0.27$',r'$z=0.50$',r'$z=1.00$'], linestyles=['solid','dashed','dashdot','dashdotdot','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=None)

    cddfsubplot1(ax2, binsedges_o8, subtitle = r'O VIII', subfigind = '(b)', xlabel=r'$ \log_{10} N\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['midnightblue','blue','dodgerblue','cyan',] , labels =  [r'$z=0.00$',r'$z=0.10$',r'$z=0.50$',r'$z=1.00$'], linestyles=['solid','dashed', 'dashdot','dotted'], fontsize =fontsize, xlim = (11.,17.), ylim=None)
    

    fig.tight_layout()
    plt.savefig(name)


def cddfplots11(name, fontsize=12):
    '''
    O7, O8 comparison to IllustrisTNG 100-1 
    + -- + -- +
    | O7 | O8 |
    + -- + -- +

    saved as cddf_coldens_o7-o8_L0100N1504_28_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_T4EOS_z-projection_8-x-6.250000-addto-12.500000slices_offset0_and_illustrisTNG.png
    '''

    # load all the data
    o7 = getcddf('cddf_coldens_o7_L0100N1504_28_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7losmatch = getcddf('cddf_coldens_o7_L0100N1504_28_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000-addto-12.500000slices_offset0_range-25.0-28.0_1060bins.npz')

    # webplotdigitize version
    #o7TNG =  readdata('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/cddf_coldens_o7_tng-100_z0_nelson_etal_2017_fig5_loglog.txt',separator = '\t',headerlength=1) 
    #o7TNG = o7TNG.T # get [mids, bins] from [[mid1,bin1],[...],...]
    tngfile = h5py.File('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/Box_CDDF_TNG100-1_nOVII_depth10_099.hdf5','r')
    edgesbinstng_o7 = np.log10(np.array(tngfile['Box_CDDF_nOVII_depth10'])) # file values are not log)


    o8 = getcddf('cddf_coldens_o8_L0100N1504_28_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8losmatch = getcddf('cddf_coldens_o8_L0100N1504_28_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000-addto-12.500000slices_offset0_range-25.0-28.0_1060bins.npz')

    ## webplotdigitize version
    #o8TNG =  readdata('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/cddf_coldens_o8_tng-100_z0_nelson_etal_2017_fig5_loglog.txt',separator = '\t',headerlength=1) 
    #o8TNG = o8TNG.T # get [mids, bins] from [[mid1,bin1],[...],...]
    
    tngfile = h5py.File('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/Box_CDDF_TNG100-1_nOVIII_depth10_099.hdf5','r')
    edgesbinstng_o8 = np.log10(np.array(tngfile['Box_CDDF_nOVIII_depth10'])) # file values are not log

    
    ncols = 2
    nrows = 1

    # uses gridspec and add_subplot under the hood
    fig, (ax1, ax2) = plt.subplots(nrows=nrows,ncols=ncols,sharex='col',sharey='row',figsize = (5.5,3.))  


    # illustrisTNG already has y in log10, so plot separately
    cddfsubplot1(ax1, [o7,o7losmatch],subtitle = 'O VII',subfigind = '(a)', xlabel=r'$ \log_{10} N_{\mathrm{O VII}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}\, \partial^2 n/ \partial N_{\mathrm{ion}} \partial X  $', colors = ['orange','orange'], labels = [r'EA, $6.25$', r'EA, $12.5$'], linestyles=['dashed','solid'], fontsize = fontsize ,xlim = (12.5,16.),ylim=(-17.,-11.),xticklabels=True,yticklabels=True,legendloc = None,takeylog = True,ylog=False,subfigindloc=None) 

    ax1.step(edgesbinstng_o7[0],edgesbinstng_o7[1],where='mid',color='firebrick',linestyle='solid', label = r'I-TNG, 15')
    ax1.legend(fontsize=fontsize)
 

    cddfsubplot1(ax2, [o8,o8losmatch],subtitle = 'O VIII',subfigind = '(b)', xlabel=r'$ \log_{10} N_{\mathrm{O VIII}}\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['midnightblue','midnightblue'], labels = [r'EA, $6.25$', r'EA, $12.5$'],linestyles=['dashed','solid'], fontsize = fontsize ,xlim = (12.5,16.),ylim=(-17.,-11.),xticklabels=True,yticklabels=False,legendloc = None,takeylog = True,ylog=False,subfigindloc=None) 
    
    ax2.step(edgesbinstng_o8[0],edgesbinstng_o8[1],where='mid',color='mediumpurple',linestyle='solid', label = r'I-TNG, 15')
    ax2.legend(fontsize=fontsize)

    fig.tight_layout()
    plt.savefig(name)


def cddfplots12_relative(name='cddf_coldens_o78_L0100N1504_27_test3.x_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_varEOS_16-x-6.250000slices_range-25.0-28.0_1060bins.pdf', fontsize=12):
    '''
    O7, O8 effect of ISM handlind
    + -- + -- +
    | O7 | O8 |
    + -- + -- +

    saved as cddf_coldens_o7-o8_L0100N1504_28-27-25-23-19_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_relative.png
    '''

    # load all the data
    o7_base  = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_wiEOS = getcddf('cddf_coldens_o7_L0100N1504_27_test3.3_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_wiEOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o7_base)
    o7_noEOS = getcddf('cddf_coldens_o7_L0100N1504_27_test3.3_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_noEOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o7_base)
    o7_base_n = [o7_base[0]/o7_base[0], o7_base[1]]
    binsedges_o7 = [o7_base_n, o7_wiEOS, o7_noEOS]

    o8_base  = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_wiEOS = getcddf('cddf_coldens_o8_L0100N1504_27_test3.3_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_wiEOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o8_base)
    o8_noEOS = getcddf('cddf_coldens_o8_L0100N1504_27_test3.3_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_noEOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o8_base)
    o8_base_n = [o8_base[0]/o8_base[0], o8_base[1]]
    binsedges_o8 = [o8_base_n, o8_wiEOS, o8_noEOS]
    
    ncols = 2
    nrows = 1

    # uses gridspec and add_subplot under the hood
    fig, (ax1, ax2) = plt.subplots(nrows=nrows,ncols=ncols,sharex='col',sharey='row',figsize = (5.5,3.))  

    cddfsubplot1(ax1, binsedges_o7, subtitle = 'O VII', subfigind = '(a)', subfigindloc=(0.95, 0.73), xlabel=r'$ \log_{10} \, N_{\mathrm{O\, VII}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}\, f(N)\, / \, f(N, \mathrm{T4})$', colors = ['red', 'lightsalmon', 'maroon'] , labels=['T4', 'naive','none'], linestyles=['solid','dashed','dashdot'], fontsize =fontsize, xlim = (11.,17.), ylim=(-0.005, 0.05), ylog=False, takeylog=True, legendloc='upper left')
    cddfsubplot1(ax2, binsedges_o8, subtitle = r'O VIII', subfigind = '(b)', subfigindloc=(0.95, 0.73), xlabel=r'$ \log_{10} \, N_{\mathrm{O\, VIII}}\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['blue','midnightblue','cyan',] , labels=['T4', 'naive','none'], linestyles=['solid','dashed','dashdot'], fontsize =fontsize, xlim = (11.,17.), ylim=(-0.005, 0.05), ylog=False, takeylog=True, legendloc='upper left')
    
    fig.tight_layout()
    plt.savefig(mdir + name, format='pdf')
    

def cddfplots13_relative(name='cddf_coldens_o78_L0100N1504_27_test3.x_varAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.pdf', fontsize=12):
    '''
    O7, O8 effect of Smoothed vs. Particle abundances
    + -- + -- +
    | O7 | O8 |
    + -- + -- +

    saved as cddf_coldens_o7-o8_L0100N1504_28-27-25-23-19_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_relative.png
    '''

    # load all the data
    o7_base = getcddf('cddf_coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7_sm   = getcddf('cddf_coldens_o7_L0100N1504_27_test3.3_SmAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o7_base)
    o7_base_n = [o7_base[0]/o7_base[0], o7_base[1]]
    binsedges_o7 = [o7_base_n, o7_sm]

    o8_base = getcddf('cddf_coldens_o8_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o8_sm   = getcddf('cddf_coldens_o8_L0100N1504_27_test3.3_SmAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_16-x-6.250000slices_range-25.0-28.0_1060bins.npz', norm=o8_base)
    o8_base_n = [o8_base[0]/o8_base[0], o8_base[1]]
    binsedges_o8 = [o8_base_n, o8_sm]
    
    ncols = 2
    nrows = 1

    # uses gridspec and add_subplot under the hood
    fig, (ax1, ax2) = plt.subplots(nrows=nrows,ncols=ncols,sharex='col',sharey='row',figsize = (5.5,3.))  

    cddfsubplot1(ax1, binsedges_o7, subtitle = 'O VII', subfigind = '(a)', xlabel=r'$ \log_{10} \, N_{\mathrm{O\, VII}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}\, f(N)\, / \, f(N, \mathrm{pt})$', colors = ['red', 'lightsalmon'] , labels=['particle', 'smoothed'], linestyles=['solid','dashed'], fontsize=fontsize, xlim = (11.,17.), ylim=(-0.4, 0.4), ylog=False, takeylog=True, legendloc='upper left')
    cddfsubplot1(ax2, binsedges_o8, subtitle = r'O VIII', subfigind = '(b)', xlabel=r'$ \log_{10} \, N_{\mathrm{O\, VIII}}\; [\mathrm{cm}^{-2}]$', ylabel = None, colors = ['blue', 'cyan',] , labels=['particle', 'smoothed'], linestyles=['solid','dashed'], fontsize =fontsize, xlim = (11.,17.), ylim=(-0.4, 0.4), ylog=False, takeylog=True, legendloc='upper left')
    
    fig.tight_layout()
    plt.savefig(mdir + name, format='pdf')
    

def cddfplots_ecoldensconv(name='cddf_coldens_electrons_L0100N1504_28-19-12_test3.31_PtAb_C2Sm_32000pix-redto-2000-4000-8000-16000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.pdf', fontsize=12):
    '''
    convergence of electron column density distributions over 100 cMpc 
    sightlines at z=0, 1, 3 and evolution between redshifts    

    '''

    # load all the data
    z0_32 = getcddf('cddf_coldens_electrons_L0100N1504_28_test3.31_PtAb_C2Sm_32000pix_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z0_16 = getcddf('cddf_coldens_electrons_L0100N1504_28_test3.31_PtAb_C2Sm_32000pix-redto-16000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z0_8  = getcddf('cddf_coldens_electrons_L0100N1504_28_test3.31_PtAb_C2Sm_32000pix-redto-8000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z0_4  = getcddf('cddf_coldens_electrons_L0100N1504_28_test3.31_PtAb_C2Sm_32000pix-redto-4000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z0_2  = getcddf('cddf_coldens_electrons_L0100N1504_28_test3.31_PtAb_C2Sm_32000pix-redto-2000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z0_abs = [z0_32, z0_16, z0_8, z0_4, z0_2]
    z0_rel = [[z0_32[0] / z0_32[0], z0_32[1]], [z0_16[0] / z0_32[0], z0_32[1]], [z0_8[0] / z0_32[0], z0_32[1]], [z0_4[0] / z0_32[0], z0_32[1]], [z0_2[0] / z0_32[0], z0_32[1]]]
    
    z1_32 = getcddf('cddf_coldens_electrons_L0100N1504_19_test3.31_PtAb_C2Sm_32000pix_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z1_16 = getcddf('cddf_coldens_electrons_L0100N1504_19_test3.31_PtAb_C2Sm_32000pix-redto-16000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z1_8  = getcddf('cddf_coldens_electrons_L0100N1504_19_test3.31_PtAb_C2Sm_32000pix-redto-8000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z1_4  = getcddf('cddf_coldens_electrons_L0100N1504_19_test3.31_PtAb_C2Sm_32000pix-redto-4000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z1_2  = getcddf('cddf_coldens_electrons_L0100N1504_19_test3.31_PtAb_C2Sm_32000pix-redto-2000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z1_abs = [z1_32, z1_16, z1_8, z1_4, z1_2]
    z1_rel = [[z1_32[0] / z1_32[0], z1_32[1]], [z1_16[0] / z1_32[0], z1_32[1]], [z1_8[0] / z1_32[0], z1_32[1]], [z1_4[0] / z1_32[0], z1_32[1]], [z1_2[0] / z1_32[0], z1_32[1]]]
    
    z3_32 = getcddf('cddf_coldens_electrons_L0100N1504_12_test3.31_PtAb_C2Sm_32000pix_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z3_16 = getcddf('cddf_coldens_electrons_L0100N1504_12_test3.31_PtAb_C2Sm_32000pix-redto-16000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z3_8  = getcddf('cddf_coldens_electrons_L0100N1504_12_test3.31_PtAb_C2Sm_32000pix-redto-8000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z3_4  = getcddf('cddf_coldens_electrons_L0100N1504_12_test3.31_PtAb_C2Sm_32000pix-redto-4000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z3_2  = getcddf('cddf_coldens_electrons_L0100N1504_12_test3.31_PtAb_C2Sm_32000pix-redto-2000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz')
    z3_abs = [z3_32, z3_16, z3_8, z3_4, z3_2]
    z3_rel = [[z3_32[0] / z3_32[0], z3_32[1]], [z3_16[0] / z3_32[0], z3_32[1]], [z3_8[0] / z3_32[0], z3_32[1]], [z3_4[0] / z3_32[0], z3_32[1]], [z3_2[0] / z3_32[0], z3_32[1]]]
    
    zev_abs = [z0_32, z1_32, z3_32]
    zev_rel = [[z0_32[0] / z0_32[0], z0_32[1]], [z1_32[0] / z0_32[0], z0_32[1]], [z3_32[0] / z0_32[0], z0_32[1]]]
    ncols = 4
    nrows = 2

    # uses gridspec and add_subplot under the hood
    fig = plt.figure(figsize=(10., 5.))  
    grid = gsp.GridSpec(nrows, ncols, wspace=0., hspace=0.)
    axes = tuple([tuple(plt.subplot(grid[yi, xi]) for xi in range(ncols)) for yi in range(nrows)])
    ((ax1, ax3, ax5, ax7), (ax2, ax4, ax6, ax8))  = axes
    
    xlabel=r'$\log_{10} \, N_e \;[\mathrm{cm}^{-2}]$'
    ylabel_abs=r'$\log_{10} \, \partial^2 n \, / \, \partial N_e \, \partial X$'
    ylabel_rel=r'$\log_{10} \, f(N_e) \, / \, f(N_e, 32\mathrm{k})$'
    pixlabels = ['32k', '16k', '8k', '4k', '2k']
    zlabels   = ['$z=0$', '$z=1$', r'$z=3$']
    linestyles = ['solid', 'dashed', 'dashdot', 'dashdotdot', 'dotted']
    colors_z0 = ['navy', 'blue', 'dodgerblue', 'skyblue', 'aqua']
    colors_z1 = ['darkgreen', 'green', 'olive', 'limegreen', 'springgreen']
    colors_z3 = ['maroon', 'brown', 'red', 'tomato', 'lightsalmon']
    colors_zev = [colors_z0[0], colors_z1[0], colors_z3[0]]
    
    xlim = (18.8, 22.4)
    ylim_abs = (-29.5, -17.5)
    ylim_rel = (-0.5, 0.5)
    
    axes = np.array(axes)
    for ax in axes[0]:
        ax.minorticks_on()
        ax.tick_params(labelsize=fontsize, direction='in', right=True, top=True,\
                       axis='both', which='both',\
                       labelbottom=False, labelleft=False, labelright=False, labeltop=False)
        ax.set_xlim(xlim)
        ax.set_ylim(ylim_abs)
    for ax in axes[1]:
        ax.minorticks_on()
        ax.tick_params(labelsize=fontsize, direction='in', right=True, top=True,\
                       axis='both', which='both',\
                       labelbottom=True, labelleft=False, labelright=False, labeltop=False)
        ax.set_xlim(xlim)
        ax.set_ylim(ylim_rel)
    for ax in axes[:, 0]:
        ax.tick_params(labelleft=True)
    
    
    cddfsubplot1(ax1, z0_abs, subtitle=r'$z=0$', subfigind=None,\
                 xlabel=None, ylabel=ylabel_abs,\
                 colors=colors_z0, labels=pixlabels, linestyles=linestyles,\
                 fontsize=fontsize, xlim=xlim, ylim=ylim_abs, ylog=False,\
                 takeylog=True, legendloc='lower left')
    cddfsubplot1(ax2, z0_rel, subtitle=r'$z=0$', subfigind=None,\
                 xlabel=xlabel, ylabel=ylabel_rel,\
                 colors=colors_z0, labels=pixlabels, linestyles=linestyles,\
                 fontsize=fontsize, xlim=xlim, ylim=ylim_rel, ylog=False,\
                 takeylog=True, legendloc='upper left', dolegend=False)
    
    cddfsubplot1(ax3, z1_abs, subtitle=r'$z=1$', subfigind=None,\
                 xlabel=None, ylabel=None,\
                 colors=colors_z1, labels=pixlabels, linestyles=linestyles,\
                 fontsize=fontsize, xlim=xlim, ylim=ylim_abs, ylog=False,\
                 takeylog=True, legendloc='lower left')
    cddfsubplot1(ax4, z1_rel, subtitle=r'$z=1$', subfigind=None,\
                 xlabel=xlabel, ylabel=None,\
                 colors=colors_z1, labels=pixlabels, linestyles=linestyles,\
                 fontsize=fontsize, xlim=xlim, ylim=ylim_rel, ylog=False,\
                 takeylog=True, legendloc='upper left', dolegend=False)

    cddfsubplot1(ax5, z3_abs, subtitle=r'$z=3$', subfigind=None,\
                 xlabel=None, ylabel=None,\
                 colors=colors_z3, labels=pixlabels, linestyles=linestyles,\
                 fontsize=fontsize, xlim=xlim, ylim=ylim_abs, ylog=False,\
                 takeylog=True, legendloc='lower left')
    cddfsubplot1(ax6, z3_rel, subtitle=r'$z=3$', subfigind=None,\
                 xlabel=xlabel, ylabel=None,\
                 colors=colors_z3, labels=pixlabels, linestyles=linestyles,\
                 fontsize=fontsize, xlim=xlim, ylim=ylim_rel, ylog=False,\
                 takeylog=True, legendloc='upper left', dolegend=False)
    
    cddfsubplot1(ax7, zev_abs, subtitle=r'32k pixels', subfigind=None,\
                 xlabel=None, ylabel=None,\
                 colors=colors_zev, labels=zlabels, linestyles=('solid',)*len(zev_rel),\
                 fontsize=fontsize, xlim=xlim, ylim=ylim_abs, ylog=False,\
                 takeylog=True, legendloc='lower left')
    cddfsubplot1(ax8, zev_rel, subtitle=r'32k pixels', subfigind=None,\
                 xlabel=xlabel, ylabel=None,\
                 colors=colors_zev, labels=zlabels, linestyles=('solid',)*len(zev_rel),\
                 fontsize=fontsize, xlim=xlim, ylim=ylim_rel, ylog=False,\
                 takeylog=True, legendloc='upper left', dolegend=False)
    
    fig.tight_layout()
    plt.savefig(mdir + name, format='pdf')
    
def cddfplots_ecoldencomps(compare='pix', relative=False, name=None, fontsize=12):
    '''
    convergence of electron column density distributions over 100 cMpc 
    sightlines at z=0, 1, 3 and evolution between redshifts    
    
    compare = 'pix', 'z', or 'ism'
    '''

    numpixs = [32000, 16000, 8000, 4000, 2000]
    snaps   = [28, 19, 12]
    aexps   = [1.000000, 0.498972, 0.248973]
    isms    = ['T4EOS', 'noEOS', 'fully-ionized-EOS']
    pixfills = ['', '-redto-16000', '-redto-8000', '-redto-4000', '-redto-2000']
    basename = 'cddf_coldens_electrons_L0100N1504_%s_test3.31_PtAb_C2Sm_32000pix%s_6.25slice_zcen-sum_z-projection_%s_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins.npz'
    snaplabels = ['']

    # uses gridspec and add_subplot under the hood
    
    xlabel=r'$\log_{10} \, N_e \;[\mathrm{cm}^{-2}]$'
    ylabel_abs=r'$\log_{10} \, \partial^2 n \, / \, \partial N_e \, \partial X$'
    ylabel_rel=r'$\log_{10} \, f(N_e) \, / \, f(N_e,$%s$)$'
    
    xlim = (18.8, 23.)
    ylim_abs = (-29.5, -17.5)
    
    pixlabels   = ['$%.2f^{2}$ ckpc$^{2}$'%(100. / float(num) * 1.e3) for num in numpixs]
    ismlabels   = [r'$T_{\mathrm{SF}} = 10^{4} \, \mathrm{K}$', r'$n_{e, \mathrm{SF}} = 0$', r'$n_{e, \mathrm{SF}} = n_{\mathrm{H}} + 2 n_{\mathrm{He}}$']
    snaplabels  = [r'$z=0$', r'$z=1$', r'$z=3$']
    rhobav_z0   = 3. / (8. * np.pi * c.gravity) * c.hubble**2 * c.hubbleparam**2 * c.omegabaryon
    nhav_z0     = rhobav_z0 / 0.752 / c.atomw_H / c.u
    NHavs       = [np.log10(nhav_z0 / aexp**3 * 100. * c.cm_per_mpc * aexp) for aexp in aexps]

    linestyles = ['solid', 'dashed', 'dashdot', 'dashdotdot', 'dotted'] # different slice thicknesses
    colors     = np.array([['green', 'lime', 'olive'], ['brown', 'red', 'salmon'], ['purple', 'magenta', 'mediumorchid']])       # different pixel sizes                  # no ssh/ ssh
    
    if relative:
        if compare in ['pix']:
            ylabeldist = 6
        elif compare in ['ism', 'z']:
            ylabeldist = 4
    else:
        if compare in ['pix', 'z']:
            ylabeldist = 5
        elif compare == 'ism':
            ylabeldist = 5
    
    if compare == 'z':
        ncols = 5
        nrows = 3
        
        cddfs = [[[getcddf(basename%(snap, pix, ism)) for snap in snaps]  for pix in pixfills] for ism in isms]
            
        colors_     = [[colorset] * len(numpixs) for colorset in colors.T]
        linestyles_ = [[[linestyle] * len(snaps) for linestyle in linestyles]] * nrows
        subtitles_  = [['\n'.join([isml, pixl]) for pixl in pixlabels] for isml in ismlabels]
        nhpars      = [[NHavs] * ncols] * nrows
        labels      = snaplabels
        ylabel_rel  = ylabel_rel%(snaplabels[0])
        ylim_rel    = (-1., 1.)

    elif compare == 'pix':
        ncols = 3
        nrows = 3
        
        cddfs = [[[getcddf(basename%(snap, pix, ism)) for pix in pixfills] for ism in isms] for snap in snaps]
            
        colors_     = [[[color] * len(numpixs) for color in colorset] for colorset in colors]
        linestyles_ = [[linestyles] * len(snaps)] * nrows
        subtitles_  = [['\n'.join([isml, snapl]) for isml in ismlabels] for snapl in snaplabels] 
        nhpars      = [[[NHav]] * ncols for NHav in NHavs]
        labels      = pixlabels
        ylabel_rel  = ylabel_rel%(pixlabels[0])
        ylim_rel    = (-1., 0.55)
    
    elif compare == 'ism':
        ncols = 5
        nrows = 3
        
        cddfs = [[[getcddf(basename%(snap, pix, ism))  for ism in isms] for pix in pixfills] for snap in snaps]
            
        colors_     = [[colorset] * len(numpixs) for colorset in colors]
        linestyles_ = [[[linestyle] * len(isms) for linestyle in linestyles]] * nrows
        subtitles_  = [['\n'.join([pixl, snapl]) for pixl in pixlabels] for snapl in snaplabels] 
        nhpars      = [[[NHav]] * ncols for NHav in NHavs]
        labels      = ismlabels
        ylabel_rel  = ylabel_rel%(ismlabels[0])
        ylim_rel    = (-1., 0.55)
        
    if relative:
        cddfs = [[[[binsedges[0] / col[0][0], binsedges[1]] for binsedges in col] for col in row] for row in cddfs]
        ylim  = ylim_rel
        legendloc = 'lower left'
        ylabel = ylabel_rel
        rellabel = '_relative'
    else:
        ylim = ylim_abs
        legendloc = 'lower left'
        ylabel = ylabel_abs
        rellabel = ''
    # uses gridspec and add_subplot under the hood
    
    fig = plt.figure(figsize=(3.5 * ncols, 3. * nrows))  
    grid = gsp.GridSpec(nrows, ncols, wspace=0., hspace=0., bottom=0.1, left=0.07, right=0.98)
    axes = [[plt.subplot(grid[yi, xi]) for xi in range(ncols)] for yi in range(nrows)]
    
    for genind in range(nrows * ncols):
        ri = genind // ncols
        ci = genind % ncols
        
        ax = axes[ri][ci]
        
        cddfsubplot1(ax, cddfs[ri][ci], subtitle=subtitles_[ri][ci], subfigind=None,\
                 xlabel=None, ylabel=None,\
                 colors=colors_[ri][ci], labels=labels, linestyles=linestyles_[ri][ci],\
                 fontsize=fontsize, xlim=xlim, ylim=ylim, ylog=False,\
                 takeylog=True, legendloc=legendloc)
        ax.tick_params(labelsize=fontsize, direction='in', right=True, top=True,\
                       axis='both', which='both',\
                       labelbottom=(ri == nrows - 1), labelleft=(ci == 0), labelright=False, labeltop=False)
        for nhav in nhpars[ri][ci]:
            ax.axvline(nhav, linestyle='dotted', color='gray')
            
    suplabel(fig, 'x', xlabel, label_prop={'fontsize': fontsize},
             labelpad=5, ha='center',va='center')
    suplabel(fig, 'y', ylabel, label_prop={'fontsize': fontsize},
             labelpad=ylabeldist, ha='center',va='center')
    
    fig.tight_layout()
    
    if name is None:
        name = 'cddf_coldens_electrons_L0100N1504_28-19-12_test3.31_PtAb_C2Sm_32000pix-redto-2000-4000-8000-16000_6.25slice_zcen-sum_z-projection_T4EOS_totalbox_1-x-100.000000slices_range-25.0-28.0_1060bins_%scomp%s.pdf'%(compare, rellabel)
    plt.savefig(mdir + name, format='pdf')

def cddfplots_h1velcuts(compare='pix', relative=False, plottype='cddf',\
                        name='%s_coldens_h1-ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_var-pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_var-slices_offset0_range-25.0-28.0_1060bins_%s.pdf', fontsize=12):
    '''
    compare: 'ssh', 'pix', or 'slice'
    plottype: 'cddf', 'cumuldist'
    h1 with and w/o self-shielding at different velocity cuts and pixel 
    resolutions
    redshift z=3.5, L0025N0752, Recal      
    project with Sofia Gallego
    '''
    
    aexp = 0.220849 
    Hz   = csu.Hubble(1. / aexp - 1.)
    numpixs = [16000, 8000, 4000]
    numsl   = [1, 2, 3, 4, 6]
    depths  = [0.520833333333 * aexp * csu.c.cm_per_mpc * num * Hz / 1.e5 for num in numsl] # rest-frame km/s
    ions    = ['Rahmati+ 2013', 'no self-shielding']
    L_z = 25.
    z   = 1. / aexp - 1.
    numpix = 8000**2
    
    
    # load all the data
    ssh_16000_8slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_8-x-0.520833-addto-3.125000slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_16000_12slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_12-x-0.520833-addto-2.083333slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_16000_16slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_16-x-0.520833-addto-1.562500slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_16000_24slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_24-x-0.520833-addto-1.041667slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_16000_48slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_48-x-0.520833slices_range-25.0-28.0_1060bins.npz')
    
    ssh_8000_8slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_8-x-0.520833-addto-3.125000slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_8000_12slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_12-x-0.520833-addto-2.083333slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_8000_16slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_16-x-0.520833-addto-1.562500slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_8000_24slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_24-x-0.520833-addto-1.041667slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_8000_48slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_48-x-0.520833slices_range-25.0-28.0_1060bins.npz')
    
    ssh_4000_8slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_8-x-0.520833-addto-3.125000slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_4000_12slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_12-x-0.520833-addto-2.083333slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_4000_16slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_16-x-0.520833-addto-1.562500slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_4000_24slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_24-x-0.520833-addto-1.041667slices_offset0_range-25.0-28.0_1060bins.npz')
    ssh_4000_48slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_48-x-0.520833slices_range-25.0-28.0_1060bins.npz')
    
   
    nossh_16000_8slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_8-x-0.520833-addto-3.125000slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_16000_12slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_12-x-0.520833-addto-2.083333slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_16000_16slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_16-x-0.520833-addto-1.562500slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_16000_24slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_24-x-0.520833-addto-1.041667slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_16000_48slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_48-x-0.520833slices_range-25.0-28.0_1060bins.npz')
    #nossh_16000_8slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_8-x-0.520833-addto-3.125000slices_offset0_range-25.0-28.0_1060bins.npz')
    #nossh_16000_12slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_12-x-0.520833-addto-2.083333slices_offset0_range-25.0-28.0_1060bins.npz')
    #nossh_16000_16slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_16-x-0.520833-addto-1.562500slices_offset0_range-25.0-28.0_1060bins.npz')
    #nossh_16000_24slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_24-x-0.520833-addto-1.041667slices_offset0_range-25.0-28.0_1060bins.npz')
    #nossh_16000_48slice = getcddf('cddf_coldens_h1ssh_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_16000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_48-x-0.520833slices_range-25.0-28.0_1060bins.npz')
    
    nossh_8000_8slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_8-x-0.520833-addto-3.125000slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_8000_12slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_12-x-0.520833-addto-2.083333slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_8000_16slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_16-x-0.520833-addto-1.562500slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_8000_24slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_24-x-0.520833-addto-1.041667slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_8000_48slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_8000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_48-x-0.520833slices_range-25.0-28.0_1060bins.npz')
    
    nossh_4000_8slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_8-x-0.520833-addto-3.125000slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_4000_12slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_12-x-0.520833-addto-2.083333slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_4000_16slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_16-x-0.520833-addto-1.562500slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_4000_24slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_24-x-0.520833-addto-1.041667slices_offset0_range-25.0-28.0_1060bins.npz')
    nossh_4000_48slice = getcddf('cddf_coldens_h1_L0025N0752RECALIBRATED_11_test3.31_PtAb_C2Sm_4000pix_0.520833333333slice_zcen-all_z-projection_T4EOS_velocity-sliced_48-x-0.520833slices_range-25.0-28.0_1060bins.npz')
    
    
    xlabel=r'$\log_{10} \, N_{\mathrm{H\,I}} \;[\mathrm{cm}^{-2}]$'
    pixlabels   = ['$%.2f^{2}$ pkpc$^{2}$'%(25. * aexp / float(num) * 1.e3) for num in numpixs]
    ionlabels   = ions
    slicelabels = ['$\Delta v_{\mathrm{rf}} = %.0f \, \mathrm{km/s}$'%(dp) for dp in depths]

    linestyles = ['solid', 'dashed', 'dashdot', 'dashdotdot', 'dotted'] # different slice thicknesses
    colors     = ['limegreen', 'red', 'purple']       # different pixel sizes
    alphas     = [1., 0.3]                       # no ssh/ ssh
    
    xlim = (12., 23.)
    ylim_abs = (-27., -9.)
    ylim_rel = None # (-0.5, 0.5)
    
    if relative:
        if compare in ['pix', 'ssh']:
            ylabeldist = 4
        elif compare == 'slice':
            ylabeldist = 6
    else:
        if compare in ['pix', 'ssh']:
            ylabeldist = 3
        elif compare == 'slice':
            ylabeldist = 5
    
    if plottype == 'cddf':
        ylabel_abs=r'$\log_{10} \, \partial^2 n \, / \, \partial N_{\mathrm{H\,I}} \, \partial X$'
        ylabel_rel=r'$\log_{10} \, f(N_{\mathrm{H\,I}}) \, / \, f(N_{\mathrm{H\,I}},$ %s$)$'
    elif plottype == 'cumuldist':
        ylabel_abs=r'$\mathrm{d} n(>N) \, / \, \mathrm{d} z$'
        ylabel_rel=r'$\log_{10} \, n(>N) \, / \, n(>N,$ %s$)$'
    
    if compare == 'ssh':
        ncols = 5
        nrows = 3
        
        cddfs = [[[ssh_16000_48slice, nossh_16000_48slice], [ssh_16000_24slice, nossh_16000_24slice], [ssh_16000_16slice, nossh_16000_16slice], [ssh_16000_12slice, nossh_16000_12slice], [ssh_16000_8slice, nossh_16000_8slice]],\
                 [[ssh_8000_48slice,  nossh_8000_48slice],  [ssh_8000_24slice,  nossh_8000_24slice],  [ssh_8000_16slice,  nossh_8000_16slice],  [ssh_8000_12slice,  nossh_8000_12slice],  [ssh_8000_8slice,  nossh_8000_8slice]],\
                 [[ssh_4000_48slice,  nossh_4000_48slice],  [ssh_4000_24slice,  nossh_4000_24slice],  [ssh_4000_16slice,  nossh_4000_16slice],  [ssh_4000_12slice,  nossh_4000_12slice],  [ssh_4000_8slice,  nossh_4000_8slice]]]
        
        colors_     = [[[color] * len(ions)] * ncols for color in colors]
        linestyles_ = [[[linestyle] * len(ions) for linestyle in linestyles]] * nrows
        alphas_     = [[alphas] * ncols] * nrows
        subtitles_  = [['\n'.join([slicel, pixl]) for slicel in slicelabels] for pixl in pixlabels]
        labels      = ionlabels
        ylabel_rel  = ylabel_rel%(ionlabels[0])
        ylim_rel    = (-1., 0.55)

    elif compare == 'pix':
        ncols = 5
        nrows = 2
        
        cddfs = [[[ssh_16000_48slice, ssh_8000_48slice, ssh_4000_48slice],\
                  [ssh_16000_24slice, ssh_8000_24slice, ssh_4000_24slice],\
                  [ssh_16000_16slice, ssh_8000_16slice, ssh_4000_16slice],\
                  [ssh_16000_12slice, ssh_8000_12slice, ssh_4000_12slice],\
                  [ssh_16000_8slice,  ssh_8000_8slice,  ssh_4000_8slice]],\
                 \
                 [[nossh_16000_48slice, nossh_8000_48slice, nossh_4000_48slice],\
                  [nossh_16000_24slice, nossh_8000_24slice, nossh_4000_24slice],\
                  [nossh_16000_16slice, nossh_8000_16slice, nossh_4000_16slice],\
                  [nossh_16000_12slice, nossh_8000_12slice, nossh_4000_12slice],\
                  [nossh_16000_8slice,  nossh_8000_8slice,  nossh_4000_8slice]]\
                ]
        
        colors_     = [[colors] * ncols] * nrows 
        linestyles_ = [[[linestyle] * len(numpixs) for linestyle in linestyles]] * nrows
        alphas_     = [[[alpha] * len(numpixs)] * ncols for alpha in alphas]
        subtitles_  = [['\n'.join([ionl, slicel]) for slicel in slicelabels] for ionl in ionlabels]
        labels      = pixlabels
        ylabel_rel  = ylabel_rel%(pixlabels[0])
        ylim_rel    = (-1., 0.55)
    
    elif compare == 'slice':
        ncols = 3
        nrows = 2
        
        cddfs = [[[ssh_16000_48slice, ssh_16000_24slice, ssh_16000_16slice, ssh_16000_12slice, ssh_16000_8slice],\
                  [ssh_8000_48slice,  ssh_8000_24slice,  ssh_8000_16slice,  ssh_8000_12slice,  ssh_8000_8slice],\
                  [ssh_4000_48slice,  ssh_4000_24slice,  ssh_4000_16slice,  ssh_4000_12slice,  ssh_4000_8slice]],\
                  \
                 [[nossh_16000_48slice, nossh_16000_24slice, nossh_16000_16slice, nossh_16000_12slice, nossh_16000_8slice],\
                  [nossh_8000_48slice,  nossh_8000_24slice,  nossh_8000_16slice,  nossh_8000_12slice,  nossh_8000_8slice],\
                  [nossh_4000_48slice,  nossh_4000_24slice,  nossh_4000_16slice,  nossh_4000_12slice,  nossh_4000_8slice]]\
                ]
        
        colors_     = [[[color] * len(numsl) for color in colors]] * nrows
        linestyles_ = [[linestyles] * ncols] * nrows  
        alphas_     = [[[alpha] * len(numsl)] * ncols for alpha in alphas]
        subtitles_  = [['\n'.join([ionl, pixl]) for pixl in pixlabels] for ionl in ionlabels]
        labels      = slicelabels
        ylabel_rel  = ylabel_rel%(slicelabels[0])
        ylim_rel    = (-1., 0.55)
    
    takeylog = True
    if plottype == 'cddf':
        if relative:
            cddfs = [[[[binsedges[0] / col[0][0], binsedges[1]] for binsedges in col] for col in row] for row in cddfs]
            ylim  = ylim_rel
            legendloc = 'lower left'
            ylabel = ylabel_rel
            rellabel = '_relative'
        else:
            ylim = ylim_abs
            legendloc = 'lower left'
            ylabel = ylabel_abs
            rellabel = ''
    elif plottype == 'cumuldist':
        import makecddfs as mc
        
        xlim = (16.5, 18.45)
        dz = mc.getdz(z, L_z, cosmopars=None) * float(numpix)
        
        # dn / dN dX -> dn /dz (N)
        cddfs = [[[[binsedges[0] * mc.cddf_over_pixcount(z, L_z, numpix, binsedges[1], cosmopars=None) / dz, binsedges[1]] for binsedges in col] for col in row] for row in cddfs]
        # dn /dz (N) -> dn (>N) /dz
        cddfs = [[[[np.cumsum(binsedges[0][::-1])[::-1], binsedges[1]] for binsedges in col] for col in row] for row in cddfs]
        if relative:
            cddfs = [[[[binsedges[0] / col[0][0], binsedges[1]] for binsedges in col] for col in row] for row in cddfs]
            ylim  = (-0.25, 0.25)
            if compare == 'ssh':
                ylim = (-0.55, 0.1)
            legendloc = 'lower left'
            ylabel = ylabel_rel
            rellabel = '_relative'
        else:
            ylim = (0.0, 6.7)
            legendloc = 'lower left'
            ylabel = ylabel_abs
            rellabel = ''
            takeylog = False
    # uses gridspec and add_subplot under the hood
    
    fig = plt.figure(figsize=(3.5 * ncols, 3. * nrows))  
    grid = gsp.GridSpec(nrows, ncols, wspace=0., hspace=0., bottom=0.1, left=0.07, right=0.98)
    axes = [[plt.subplot(grid[yi, xi]) for xi in range(ncols)] for yi in range(nrows)]
    
    for genind in range(nrows * ncols):
        ri = genind // ncols
        ci = genind % ncols
        
        ax = axes[ri][ci]
        
        cddfsubplot1(ax, cddfs[ri][ci], subtitle=subtitles_[ri][ci], subfigind=None,\
                 xlabel=None, ylabel=None,\
                 colors=colors_[ri][ci], labels=labels, linestyles=linestyles_[ri][ci], alphas=alphas_[ri][ci],\
                 fontsize=fontsize, xlim=xlim, ylim=ylim, ylog=False,\
                 takeylog=takeylog, legendloc=legendloc, dolegend=False)
        ax.legend(fontsize=fontsize - 1, loc=legendloc, frameon=False)
        ax.tick_params(labelsize=fontsize, direction='in', right=True, top=True,\
                       axis='both', which='both',\
                       labelbottom=(ri == nrows - 1), labelleft=(ci == 0), labelright=False, labeltop=False)
    
    suplabel(fig, 'x', xlabel, label_prop={'fontsize': fontsize},
             labelpad=6, ha='center',va='center')
    suplabel(fig, 'y', ylabel, label_prop={'fontsize': fontsize},
             labelpad=ylabeldist, ha='center',va='center')
    
    plt.savefig(mdir + name%(plottype, '%s-comp%s'%(compare, rellabel)), format='pdf', box_inches='tight')



def implot_garchingtalk_o7_o8(fontsize=14,im_o8=None,im_o7 =None):

    fig = plt.figure(figsize=(11.,5.))
    # ImageGrid used to get a color bar with height matching the two subplots
    # 111 as in plt.subplot(111)
    grid = axgrid.ImageGrid(fig, 111,\
                 nrows_ncols=(1,2),\
                 axes_pad=0.25,\
                 share_all=False,\
                 cbar_location="right",\
                 cbar_mode="single",\
                 cbar_size="7%",\
                 cbar_pad=0.25,\
                 )
    ax1, ax2 = tuple(grid)   #tuple(plt.subplot(grid[i]) for i in range(2)) 

    # load beforehand for iteration: faster
    if im_o8 is None:
        file_o8 = 'coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-sum_T4SFR_totalbox.npz'
        im_o8 = imreduce(np.load(ndir + file_o8)['arr_0'],80) # 32000 -> 400 pixels
    if im_o7 is None:
        file_o7 = 'coldens_o7_L0100N1504_27_test3.1_PtAb_C2Sm_32000pix_6.25slice_zcen-sum_z-projection_T4EOS_totalboxW.npz'
        im_o7 = imreduce(np.load(ndir + file_o7)['arr_0'],80) # 32000 -> 400 pixels
   
    img = ax1.imshow(im_o7.T,origin='lower',extent = (0.,100.,0.,100.),cmap='cubehelix',vmin=12.5,vmax=16.4)
    ax2.imshow(im_o8.T,origin='lower',extent = (0.,100.,0.,100.),cmap='cubehelix',vmin=12.5,vmax=16.4)   

    # set labels and font sizes
    ax1.tick_params(labelsize=fontsize,axis='both')
    ax2.tick_params(labelsize=fontsize,axis='both')

    
    ax1.set_xlabel('X [cMpc]', fontsize=fontsize)
    ax1.set_ylabel('Y [cMpc]', fontsize=fontsize)
    ax2.set_xlabel('X [cMpc]', fontsize=fontsize)
    ax2.set_ylabel('Y [cMpc]', fontsize=fontsize)
    
    ax1.set_title('O VII column densites', fontsize=fontsize)
    ax2.set_title('O VIII column densities', fontsize=fontsize)
   
    # set up the color bar
    #add_colorbar(ax3,img=img,clabel = r'$\log_{10} N_{\mathrm{ion}} \, [\mathrm{cm}^{-2}]$',extend='both') 
    #ax3.set_aspect(10.,adjustable='box-forced')
    mpl.colorbar.Colorbar(ax1.cax,img, extend='min',extendfrac=0.025,drawedges=False)
    ax1.cax.tick_params(labelsize=fontsize,axis='both')
    ax1.cax.set_ylabel(r'$\log_{10} N_{\mathrm{ion}} \, [\mathrm{cm}^{-2}]$',fontsize=fontsize)
    plt.savefig(mdir + 'coldens_o7-o8_L0100N1504_27_test3-3.1_PtAb_C2Sm_32000pix-redto-400_6.25slice_zcen-sum_z-projection_T4EOS_totalbox-W.png' ,format = 'png',bbox_inches = 'tight')


def cddfplots_o7_o8_100mpc_garching_talk(illustrisbox = False,with6mpc=True,with6mpcfixz=True):
    # 100 Mpc los PtAb 
    o7 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-all_T4SFR_xyz-projections_T4EOS_1-x-100.0slices_projection-axis-average_300-bins.npz')
    o8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-sum_T4SFR_xyz-projections_totalbox_1-x-100.000000slices_range-25.0-20.0_900bins')
    # 6.25 Mpc los PtAb
    o7_6mpc = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    o8_6mpc = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    # 6.25 Mpc los 0.1solarAb
    o7_6mpc_fixz = getcddf('cddf_coldens_o7_L0100N1504_27_test3_0.1solarAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    o8_6mpc_fixz = getcddf('cddf_coldens_o8_L0100N1504_27_test3_0.1solarAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_16-x-6.250000slices_300-bins_fullrange.npz')
    ## 12.5 Mpc to compare to 6.25
    #o7losmatch = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_8-x-6.250000-addto-12.500000slices_offset-average_300-bins_rangematch_32000pix_16-x-6.250000slices.npz')
    #o8losmatch = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_8-x-6.250000-addto-12.500000slices_offset-average_300-bins_rangematch_32000pix_16-x-6.250000slices.npz')

    fig, ax = plt.subplots(ncols=1,nrows=1)
    fontsize=14

    cddfsubplot1(ax, [o7,o8],subtitle = None,subfigind = None, xlabel=r'$ \log_{10} N_{\mathrm{ion}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}\, \partial^2 n/ \partial N_{\mathrm{ion}} \partial X  $',colors = ['orange','midnightblue'], labels = ['O VII, 100 cMpc sightline', 'O VIII'],linestyles=None, fontsize = fontsize ,xlim = (11.,17.),ylim=(-23.,-9.),xticklabels=True,yticklabels=True,legendloc = None,takeylog = True,ylog=False,subfigindloc=None) 
    #cddfsubplot1(ax, [o7losmatch,o8losmatch],subtitle = None,subfigind = None, xlabel=None, ylabel = None,colors = ['red','cyan'], labels = [None, None],linestyles=['dashed','dashed'], fontsize = fontsize ,xlim = None,ylim=None,xticklabels=True,yticklabels=True,legendloc = None,takeylog = True,ylog=False,subfigindloc=None)

    if with6mpc:
        cddfsubplot1(ax, [o7_6mpc,o8_6mpc],subtitle = None,subfigind = None, xlabel=None, ylabel = None,colors = ['orange','midnightblue'], labels = ['6.25 cMpc sightline', None],linestyles=['dashed','dashed'], fontsize = fontsize ,xlim = None,ylim=None,xticklabels=True,yticklabels=True,legendloc = None,takeylog = True,ylog=False,subfigindloc=None) 
    if with6mpcfixz:
        cddfsubplot1(ax, [o7_6mpc_fixz,o8_6mpc_fixz],subtitle = None,subfigind = None, xlabel=None, ylabel = None,colors = ['orange','midnightblue'], labels = [r'6.25 cMpc sightline, $Z = 0.1 Z_{\odot}$', None],linestyles=['dotted','dotted'], fontsize = fontsize ,xlim = None,ylim=None,xticklabels=True,yticklabels=True,legendloc = None,takeylog = True,ylog=False,subfigindloc=None) 
    ax.legend(fontsize=fontsize, loc='lower left')        

    # add axis limits from Nelson et al 2017, fig 5 (O6-7-8 IllustrisTNG paper)
    if illustrisbox:
        ax.add_patch(mpl.patches.Rectangle((12.5, -19.), 3.5, 8.,fill=False,edgecolor='gray',linewidth=2,alpha=0.5))
    if not with6mpc and not with6mpcfixz:
        plt.savefig(mdir + 'cddf_coldens_o7-o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-sum_T4SFR_xyz-projections_totalbox_1-x-100.000000slices.png' ,format = 'png',bbox_inches = 'tight')
    elif with6mpc and not with6mpcfixz:
        plt.savefig(mdir + 'cddf_coldens_o7-o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-sum_T4SFR_xyz-projections_totalbox_1-x-100.000000slices_and_16-x-6.25slices_z-projection.png' ,format = 'png',bbox_inches = 'tight')
    elif with6mpc and with6mpcfixz:
        plt.savefig(mdir + 'cddf_coldens_o7-o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-sum_T4SFR_xyz-projections_totalbox_1-x-100.000000slices_and_16-x-6.25slices_z-projection_and_16-x-6.25slices_z-projection_0.1solarAb.png' ,format = 'png',bbox_inches = 'tight')


def cddfplots_o7_100mpc_garching_talk():
    o7 = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-all_T4SFR_xyz-projections_T4EOS_1-x-100.0slices_projection-axis-average_300-bins.npz')
    o7losmatch = getcddf('cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_8-x-6.250000-addto-12.500000slices_offset-average_300-bins_rangematch_32000pix_16-x-6.250000slices.npz')

    # webplotdigitize version
    #o7TNG =  readdata('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/cddf_coldens_o7_tng-100_z0_nelson_etal_2017_fig5_loglog.txt',separator = '\t',headerlength=1) 
    #o7TNG = o7TNG.T # get [mids, bins] from [[mid1,bin1],[...],...]
    tngfile = h5py.File('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/Box_CDDF_TNG100-1_nOVII_depth10_099.hdf5','r')
    edgesbinstng = np.log10(np.array(tngfile['Box_CDDF_nOVII_depth10'])) # file values are not log
    

    fig, ax = plt.subplots(ncols=1,nrows=1)
    fontsize=14

    # illustris is not a step plot, and already has y in log10, so plot separately
    cddfsubplot1(ax, [o7,o7losmatch],subtitle = None,subfigind = None, xlabel=r'$ \log_{10} N_{\mathrm{O VII}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}\, \partial^2 n/ \partial N_{\mathrm{O VII}} \partial X  $', colors = ['orange','orange'], labels = [r'EAGLE, $z=0.1$, 100 cMpc sightline', r'EAGLE, $z=0.1$, $12.5$ cMpc sightline'],linestyles=['dashed','solid'], fontsize = fontsize ,xlim = (12.5,16.),ylim=(-19.,-11.),xticklabels=True,yticklabels=True,legendloc = None,takeylog = True,ylog=False,subfigindloc=None) 

    #ax.plot(*tuple(o7TNG),color='firebrick',linestyle='solid', label = r'IllustrisTNG, $z=0.0$, 15 cMpc sightline')
    ax.step(edgesbinstng[0],edgesbinstng[1],where='mid',color='firebrick',linestyle='solid', label = r'IllustrisTNG 100-1, $z=0.0$, 15 cMpc sightline')
    ax.legend(fontsize=fontsize)
    ax.set_title('O VII',fontsize=fontsize)


    # add axis limits from Nelson et al 2017, fig 5 (O6-7-8 IllustrisTNG paper)
    plt.savefig(mdir + 'cddf_coldens_o7_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-sum_T4SFR_xyz-projections_totalbox_1-x-100.000000slices_and_z-projection_8-x-6.250000-addto-12.500000slices_offset-average_and_illustrisTNG.png' ,format = 'png',bbox_inches = 'tight')


def cddfplots_o8_100mpc_garching_talk():
    o8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-sum_T4SFR_xyz-projections_totalbox_1-x-100.000000slices_range-25.0-20.0_900bins')
    o8losmatch = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_zcen-all_T4SFR_8-x-6.250000-addto-12.500000slices_offset-average_300-bins_rangematch_32000pix_16-x-6.250000slices.npz')

    ## webplotdigitize version
    #o8TNG =  readdata('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/cddf_coldens_o8_tng-100_z0_nelson_etal_2017_fig5_loglog.txt',separator = '\t',headerlength=1) 
    #o8TNG = o8TNG.T # get [mids, bins] from [[mid1,bin1],[...],...]
    
    tngfile = h5py.File('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/Box_CDDF_TNG100-1_nOVIII_depth10_099.hdf5','r')
    edgesbinstng = np.log10(np.array(tngfile['Box_CDDF_nOVIII_depth10'])) # file values are not log

    fig, ax = plt.subplots(ncols=1,nrows=1)
    fontsize=14

    # illustris is not a step plot, and already has y in log10, so plot separately
    cddfsubplot1(ax, [o8,o8losmatch],subtitle = None,subfigind = None, xlabel=r'$ \log_{10} N_{\mathrm{O VIII}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}\, \partial^2 n/ \partial N_{\mathrm{O VIII}} \partial X  $', colors = ['midnightblue','midnightblue'], labels = [r'EAGLE, $z=0.1$, 100 cMpc sightline', r'EAGLE, $z=0.1$, $12.5$ cMpc sightline'],linestyles=['dashed','solid'], fontsize = fontsize ,xlim = (12.5,16.),ylim=(-19.,-11.),xticklabels=True,yticklabels=True,legendloc = None,takeylog = True,ylog=False,subfigindloc=None) 
    
    #ax.plot(*tuple(o8TNG),color='mediumpurple',linestyle='solid', label = r'IllustrisTNG, $z=0.0$, 15 cMpc sightline')
    ax.step(edgesbinstng[0],edgesbinstng[1],where='mid',color='mediumpurple',linestyle='solid', label = r'IllustrisTNG 100-1, $z=0.0$, 15 cMpc sightline')
    ax.legend(fontsize=fontsize)
    ax.set_title('O VIII',fontsize=fontsize)


    # add axis limits from Nelson et al 2017, fig 5 (O6-7-8 IllustrisTNG paper)
    plt.savefig(mdir + 'cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-sum_T4SFR_xyz-projections_totalbox_1-x-100.000000slices_and_z-projection_8-x-6.250000-addto-12.500000slices_offset-average_and_illustrisTNG.png' ,format = 'png',bbox_inches = 'tight')


def cddfplots_o7_o8_100mpc_0p1solar_illustriscomp():
    #o8 = getcddf('cddf_coldens_o8_L0100N1504_27_test3_PtAb_C2Sm_32000pix_6.250000slice_cens-sum_T4SFR_xyz-projections_totalbox_1-x-100.000000slices_range-25.0-20.0_900bins')
    o7losmatch = getcddf('cddf_coldens_o7_L0100N1504_28_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000-addto-12.500000slices_offset0_range-25.0-28.0_1060bins.npz')
    o8losmatch = getcddf('cddf_coldens_o8_L0100N1504_28_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000-addto-12.500000slices_offset0_range-25.0-28.0_1060bins.npz')

    ## webplotdigitize version
    #o8TNG =  readdata('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/cddf_coldens_o8_tng-100_z0_nelson_etal_2017_fig5_loglog.txt',separator = '\t',headerlength=1) 
    #o8TNG = o8TNG.T # get [mids, bins] from [[mid1,bin1],[...],...]
    
    tngfile_o7 = h5py.File('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/Box_CDDF_nOVII_solar01z_depth10_TNG100-1_099.hdf5','r')
    tngfile_o8 = h5py.File('/cosma5/data/dp004/dc-wije1/line_em_abs/illustris/Box_CDDF_nOVIII_solar01z_depth10_TNG100-1_099.hdf5','r')
    edgesbinstng_o7 = np.log10(np.array(tngfile_o7['Box_CDDF_nOVII_solar01z_depth10'])) # file values are not log
    edgesbinstng_o8 = np.log10(np.array(tngfile_o8['Box_CDDF_nOVIII_solar01z_depth10'])) # file values are not log

    fig, axes = plt.subplots(ncols=2,nrows=1,figsize=(10.,5.))
    fontsize=13

    # illustris is not a step plot, and already has y in log10, so plot separately
    cddfsubplot1(axes[0], [o7losmatch], subtitle = 'O VII',subfigind = '(a)', xlabel=r'$ \log_{10} N_{\mathrm{O VII}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}\, \partial^2 n/ \partial N_{\mathrm{O VII}} \partial X  $', colors = ['firebrick'], labels = [ r'EAGLE, $12.5$ cMpc'],linestyles=['solid'], fontsize = fontsize ,xlim = (11.2,16.),ylim=(-19.,-11.),xticklabels=True,yticklabels=True,legendloc = None,takeylog = True,ylog=False,subfigindloc=None) 
    cddfsubplot1(axes[1], [o8losmatch], subtitle = 'O VIII',subfigind = '(b)', xlabel=r'$ \log_{10} N_{\mathrm{O VIII}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}\, \partial^2 n/ \partial N_{\mathrm{O VIII}} \partial X  $', colors = ['midnightblue'], labels = [ r'EAGLE, $12.5$ cMpc'],linestyles=['solid'], fontsize = fontsize ,xlim = (11.8,16.),ylim=(-19.,-10.5),xticklabels=True,yticklabels=True,legendloc = None,takeylog = True,ylog=False,subfigindloc=None) 
    
    #ax.plot(*tuple(o8TNG),color='mediumpurple',linestyle='solid', label = r'IllustrisTNG, $z=0.0$, 15 cMpc sightline')
    axes[0].step(edgesbinstng_o7[0],edgesbinstng_o7[1],where='mid',color='orange',linestyle='solid', label = r'I.-TNG 100-1, 15 cMpc')
    axes[1].step(edgesbinstng_o8[0],edgesbinstng_o8[1],where='mid',color='mediumpurple',linestyle='solid', label = r'I.-TNG 100-1, 15 cMpc')
    axes[0].legend(fontsize=fontsize)
    axes[1].legend(fontsize=fontsize)


    # add axis limits from Nelson et al 2017, fig 5 (O6-7-8 IllustrisTNG paper)
    plt.savefig(mdir + 'cddf_coldens_o7-o8_L0100N1504_28_test3.1_0.000549262436107massfracAb-0.752massfracHAb_C2Sm_32000pix_6.25slice_zcen-all_z-projection_T4EOS_8-x-6.250000-addto-12.500000slices_offset0_range-25.0-28.0_1060bins_and_illustrisTNG.png' ,format = 'png',bbox_inches = 'tight')


def compare_eq_noneq_BenOpptables():
    '''
    o7 ioneq, with/with equilibrium abundances and relative plot
    '''
    o7ioneq_eq  = getcddf('cddf_coldens_o7_EA-ioneq-L0025N0752_26_test3.21_PtAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_4-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7ioneq_neq = getcddf('cddf_coldens_o7_EA-ioneq-L0025N0752_26_test3.21_PtAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_BenOpp1-chemtables_4-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7EAref     = getcddf('cddf_coldens_o7_L0025N0752_26_test3.11_PtAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_4-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7EArecal   = getcddf('cddf_coldens_o7_L0025N0752RECALIBRATED_26_test3.11_PtAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_4-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    o7EAlo      = getcddf('cddf_coldens_o7_L0025N0376_26_test3.11_PtAb_C2Sm_16000pix_6.25slice_zcen-all_z-projection_T4EOS_4-x-6.250000slices_range-25.0-28.0_1060bins.npz')
    
    o7ioneq_eq_rel  = [o7ioneq_eq[0]/o7ioneq_eq[0], o7ioneq_eq[1]]
    o7ioneq_neq_rel = [o7ioneq_neq[0]/o7ioneq_eq[0], o7ioneq_neq[1]]
    o7EAref_rel  = [o7EAref[0]/o7ioneq_eq[0], o7EAref[1]]
    o7EArecal_rel  = [o7EArecal[0]/o7ioneq_eq[0], o7EArecal[1]]
    o7EAlo_rel  = [o7EAlo[0]/o7ioneq_eq[0], o7EAlo[1]]
    
    fig, axes = plt.subplots(ncols=1,nrows=2,figsize=(5.,10.))
    fontsize=13

    # illustris is not a step plot, and already has y in log10, so plot separately
    cddfsubplot1(axes[0], [o7ioneq_eq, o7ioneq_neq, o7EAref, o7EArecal, o7EAlo], subtitle = 'O VII',subfigind = '(a)',\
                 xlabel=None, ylabel = r'$\log_{10}\, \partial^2 n/ \partial N_{\mathrm{O VII}} \partial X  $',\
                 colors=['firebrick', 'fuchsia', 'red', 'salmon', 'maroon'], labels=[ r'EA-ioneq eq.', 'EA-ioneq non-eq.', 'EA-Ref', 'EA-Recal', 'EA-Ref N0376'], linestyles=['solid', 'solid', 'dashdot', 'dashdot', 'dashdot'],\
                 fontsize=fontsize, xlim=(11.,17.), ylim=(-21.,-9.), xticklabels=False, yticklabels=True, legendloc = None, takeylog = True, ylog=False, subfigindloc=None) 
    cddfsubplot1(axes[1], [o7ioneq_eq_rel, o7ioneq_neq_rel, o7EAref_rel, o7EArecal_rel, o7EAlo_rel], subtitle = 'O VII',subfigind = '(b)',\
                 xlabel=r'$ \log_{10} N_{\mathrm{O VII}}\; [\mathrm{cm}^{-2}]$', ylabel = r'$\log_{10}$ sightlines / equilibrium',\
                 colors=['firebrick', 'fuchsia', 'red', 'salmon', 'maroon'], labels=[ None, None, None, None, None], linestyles=['solid', 'solid', 'dashdot', 'dashdot', 'dashdot'],\
                 fontsize=fontsize, xlim=(11.,17.), ylim=(-0.25, 0.25), xticklabels=True, yticklabels=True, legendloc = None, takeylog = True, ylog=False, subfigindloc=None) 
    axes[0].legend(fontsize=fontsize)
    
    plt.savefig(mdir + 'cddf_coldens_o7_L0025-EA-ioneq-EA-ioneq-BenOpp1ChemAbunds-RefN0376-RefN0752-Recal_26_PtAb_C2Sm_16000pix_6.25slice_zcen-all_zprojectionrange-25.0-28.0_1060bins.pdf' ,format = 'pdf',bbox_inches = 'tight')